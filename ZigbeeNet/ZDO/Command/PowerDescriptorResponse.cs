using System;
using System.Collections.Generic;
using System.Text;
using ZigbeeNet.ZCL;
using ZigbeeNet.ZCL.Protocol;
using ZigbeeNet.ZDO.field;

namespace ZigbeeNet.ZDO.Command
{
    /**
 * Power Descriptor Response value object class.
 * <p>
 * The Power_Desc_rsp is generated by a remote device in response to a
 * Power_Desc_req directed to the remote device. This command shall be unicast to
 * the originator of the Power_Desc_req command.
 * <p>
 * Code is auto-generated. Modifications may be overwritten!
 */

    public class PowerDescriptorResponse : ZdoResponse
    {
        /**
         * NWKAddrOfInterest command message field.
         */
        private ushort NwkAddrOfInterest { get; set; }

        /**
         * PowerDescriptor command message field.
         */
        private PowerDescriptor powerDescriptor;

        /**
         * Default constructor.
         */
        public PowerDescriptorResponse()
        {
            ClusterId = 0x8003;
        }

        /**
         * Gets PowerDescriptor.
         *
         * @return the PowerDescriptor
         */
        public PowerDescriptor getPowerDescriptor()
        {
            return powerDescriptor;
        }

        /**
         * Sets PowerDescriptor.
         *
         * @param powerDescriptor the PowerDescriptor
         */
        public void setPowerDescriptor(PowerDescriptor powerDescriptor)
        {
            this.powerDescriptor = powerDescriptor;
        }

        public override void Serialize(ZclFieldSerializer serializer)
        {
            base.Serialize(serializer);

            serializer.Serialize(Status, ZclDataType.Get(DataType.ZDO_STATUS));
            serializer.Serialize(NwkAddrOfInterest, ZclDataType.Get(DataType.NWK_ADDRESS));
            serializer.Serialize(powerDescriptor, ZclDataType.Get(DataType.POWER_DESCRIPTOR));
        }

        public override void Deserialize(ZclFieldDeserializer deserializer)
        {
            base.Deserialize(deserializer);

            Status = (ZdoStatus)deserializer.Deserialize(ZclDataType.Get(DataType.ZDO_STATUS));
            if (Status != ZdoStatus.SUCCESS)
            {
                // Don't read the full response if we have an error
                return;
            }
            NwkAddrOfInterest = (ushort)deserializer.Deserialize(ZclDataType.Get(DataType.NWK_ADDRESS));
            powerDescriptor = (PowerDescriptor)deserializer.Deserialize(ZclDataType.Get(DataType.POWER_DESCRIPTOR));
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder(124);
            builder.Append("PowerDescriptorResponse [");
            builder.Append(base.ToString());
            builder.Append(", status=");
            builder.Append(Status);
            builder.Append(", nwkAddrOfInterest=");
            builder.Append(NwkAddrOfInterest);
            builder.Append(", powerDescriptor=");
            builder.Append(powerDescriptor);
            builder.Append(']');
            return builder.ToString();
        }

    }
}
