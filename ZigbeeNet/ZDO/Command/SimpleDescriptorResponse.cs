using System;
using System.Collections.Generic;
using System.Text;

namespace ZigbeeNet.ZDO.Command
{
    /**
     * Simple Descriptor Response value object class.
     * 
     * The Simple_Desc_rsp is generated by a remote device in response to a
     * Simple_Desc_req directed to the remote device. This command shall be unicast to
     * the originator of the Simple_Desc_req command.
     */
    public class SimpleDescriptorResponse : ZdoResponse
    {
        /**
         * NWKAddrOfInterest command message field.
         */
        public int MwkAddrOfInterest { get; set; }

        /**
         * Length command message field.
         */
        public int Length { get; set; }

        /**
         * SimpleDescriptor command message field.
         */
        public SimpleDescriptor simpleDescriptor;

        /**
         * Default constructor.
         */
        public SimpleDescriptorResponse()
        {
            clusterId = 0x8004;
        }

        /**
         * Gets NWKAddrOfInterest.
         *
         * @return the NWKAddrOfInterest
         */
        public Integer getNwkAddrOfInterest()
        {
            return MwkAddrOfInterest;
        }

        /**
         * Sets NWKAddrOfInterest.
         *
         * @param nwkAddrOfInterest the NWKAddrOfInterest
         */
        public void setNwkAddrOfInterest(final Integer nwkAddrOfInterest)
        {
            this.MwkAddrOfInterest = MwkAddrOfInterest;
        }

        /**
         * Gets Length.
         *
         * @return the Length
         */
        public Integer getLength()
        {
            return Length;
        }

        /**
         * Sets Length.
         *
         * @param length the Length
         */
        public void setLength(final Integer length)
        {
            this.Length = Length;
        }

        /**
         * Gets SimpleDescriptor.
         *
         * @return the SimpleDescriptor
         */
        public SimpleDescriptor getSimpleDescriptor()
        {
            return simpleDescriptor;
        }

        /**
         * Sets SimpleDescriptor.
         *
         * @param simpleDescriptor the SimpleDescriptor
         */
        public void setSimpleDescriptor(final SimpleDescriptor simpleDescriptor)
        {
            this.simpleDescriptor = simpleDescriptor;
        }

        @Override
        public void serialize(final ZclFieldSerializer serializer)
        {
            super.serialize(serializer);

            serializer.serialize(status, ZclDataType.ZDO_STATUS);
            serializer.serialize(MwkAddrOfInterest, ZclDataType.NWK_ADDRESS);
            serializer.serialize(Length, ZclDataType.UNSIGNED_8_BIT_INTEGER);
            serializer.serialize(simpleDescriptor, ZclDataType.SIMPLE_DESCRIPTOR);
        }

        @Override
        public void deserialize(final ZclFieldDeserializer deserializer)
        {
            super.deserialize(deserializer);

            status = (ZdoStatus)deserializer.deserialize(ZclDataType.ZDO_STATUS);
            if (status != ZdoStatus.SUCCESS)
            {
                // Don't read the full response if we have an error
                return;
            }
            MwkAddrOfInterest = (Integer)deserializer.deserialize(ZclDataType.NWK_ADDRESS);
            Length = (Integer)deserializer.deserialize(ZclDataType.UNSIGNED_8_BIT_INTEGER);
            simpleDescriptor = (SimpleDescriptor)deserializer.deserialize(ZclDataType.SIMPLE_DESCRIPTOR);
        }

        @Override
        public String toString()
        {
            final StringBuilder builder = new StringBuilder(152);
            builder.append("SimpleDescriptorResponse [");
            builder.append(super.toString());
            builder.append(", status=");
            builder.append(status);
            builder.append(", nwkAddrOfInterest=");
            builder.append(MwkAddrOfInterest);
            builder.append(", length=");
            builder.append(Length);
            builder.append(", simpleDescriptor=");
            builder.append(simpleDescriptor);
            builder.append(']');
            return builder.toString();
        }

    }
}
