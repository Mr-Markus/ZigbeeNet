//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember Structure " EmberTransientKeyData ".
    /// The transient key data structure.
    /// </summary>
    public class EmberTransientKeyData
    {
        
        /// <summary>
        ///  The IEEE address paired with the transient link key.
        /// </summary>
        private IeeeAddress _eui64;
        
        /// <summary>
        ///  The key data structure matching the transient key.
        /// </summary>
        private EmberKeyData _keyData;
        
        /// <summary>
        ///  The incoming frame counter associated with this key.
        /// </summary>
        private int _incomingFrameCounter;
        
        /// <summary>
        ///  The number of milliseconds remaining before the key is automatically timed out of the
        /// transient key table.
        /// </summary>
        private int _countdownTimerMs;
        
        public EmberTransientKeyData()
        {
        }
        
        public EmberTransientKeyData(EzspDeserializer deserializer)
        {
            Deserialize(deserializer);
        }
        
        /// <summary>
        /// The eui64 to set as <see cref="EmberEUI64"/> </summary>
        public void SetEui64(IeeeAddress eui64)
        {
            _eui64 = eui64;
        }
        
        /// <summary>
        /// The keyData to set as <see cref="EmberKeyData"/> </summary>
        public void SetKeyData(EmberKeyData keyData)
        {
            _keyData = keyData;
        }
        
        /// <summary>
        /// The incomingFrameCounter to set as <see cref="uint32_t"/> </summary>
        public void SetIncomingFrameCounter(int incomingFrameCounter)
        {
            _incomingFrameCounter = incomingFrameCounter;
        }
        
        /// <summary>
        /// The countdownTimerMs to set as <see cref="uint32_t"/> </summary>
        public void SetCountdownTimerMs(int countdownTimerMs)
        {
            _countdownTimerMs = countdownTimerMs;
        }
        
        /// <summary>
        ///  The IEEE address paired with the transient link key.
        /// Return the eui64 as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetEui64()
        {
            return _eui64;
        }
        
        /// <summary>
        ///  The key data structure matching the transient key.
        /// Return the keyData as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetKeyData()
        {
            return _keyData;
        }
        
        /// <summary>
        ///  The incoming frame counter associated with this key.
        /// Return the incomingFrameCounter as <see cref="System.Int32"/>
        /// </summary>
        public int GetIncomingFrameCounter()
        {
            return _incomingFrameCounter;
        }
        
        /// <summary>
        ///  The number of milliseconds remaining before the key is automatically timed out of the
        /// transient key table.
        /// Return the countdownTimerMs as <see cref="System.Int32"/>
        /// </summary>
        public int GetCountdownTimerMs()
        {
            return _countdownTimerMs;
        }
        
        /// <summary>
        /// Serialise the contents of the EZSP structure. </summary>
        public int[] Serialize(EzspSerializer serializer)
        {
            serializer.SerializeEmberEui64(_eui64);
            serializer.SerializeEmberKeyData(_keyData);
            serializer.SerializeUInt32(_incomingFrameCounter);
            serializer.SerializeUInt32(_countdownTimerMs);
            return serializer.GetPayload();
        }
        
        /// <summary>
        /// Deserialise the contents of the EZSP structure. </summary>
        public void Deserialize(EzspDeserializer deserializer)
        {
            _eui64 = deserializer.DeserializeEmberEui64();
            _keyData = deserializer.DeserializeEmberKeyData();
            _incomingFrameCounter = deserializer.DeserializeUInt32();
            _countdownTimerMs = deserializer.DeserializeUInt32();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EmberTransientKeyData [eui64=");
            builder.Append(_eui64);
            builder.Append(", keyData=");
            builder.Append(_keyData);
            builder.Append(", incomingFrameCounter=");
            builder.Append(_incomingFrameCounter);
            builder.Append(", countdownTimerMs=");
            builder.Append(_countdownTimerMs);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
