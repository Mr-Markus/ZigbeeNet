//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    
    
    /// <summary>
    /// Class to implement the Ember Enumeration <b>EmberInitialSecurityBitmask</b>
    /// </summary>
    public enum EmberInitialSecurityBitmask
    {
        
        /// <summary>
        /// Default unknown value
        /// </summary>
        UNKNOWN = -1,
        
        /// <summary>
        ///  [0] This enables ZigBee Standard Security on the node.
        /// </summary>
        EMBER_STANDARD_SECURITY_MODE = 0x0000,
        
        /// <summary>
        ///  [2] This enables Distributed Trust Center Mode for the device forming the network.
        /// (Previously known as EMBER_NO_TRUST_CENTER_MODE)
        /// </summary>
        EMBER_DISTRIBUTED_TRUST_CENTER_MODE = 0x0002,
        
        /// <summary>
        ///  [4] This enables a Global Link Key for the Trust Center. All nodes will share the same Trust
        /// Center Link Key
        /// </summary>
        EMBER_TRUST_CENTER_GLOBAL_LINK_KEY = 0x0004,
        
        /// <summary>
        ///  [8] This enables devices that perform MAC Association with a pre-configured Network Key to
        /// join the network. It is only set on the Trust Center.
        /// </summary>
        EMBER_PRECONFIGURED_NETWORK_KEY_MODE = 0x0008,
        
        /// <summary>
        ///  [64] This denotes that the
        /// ::EmberInitialSecurityState::preconfiguredTrustCenterEui64 has a value in it
        /// containing the trust center EUI64. The device will only join a network and accept commands
        /// from a trust center with that EUI64. Normally this bit is NOT set, and the EUI64 of the trust
        /// center is learned during the join process. When commissioning a device to join onto an
        /// existing network that is using a trust center, and without sending any messages, this bit
        /// must be set and the field ::EmberInitialSecurityState::preconfiguredTrustCenterEui64
        /// must be populated with the appropriate EUI64.
        /// </summary>
        EMBER_HAVE_TRUST_CENTER_EUI64 = 0x0040,
        
        /// <summary>
        ///  [132] This denotes that the preconfiguredKey is not the actual Link Key but a Secret Key known
        /// only to the Trust Center. It is hashed with the IEEE Address of the destination device in order
        /// to create the actual Link Key used in encryption. This is bit is only used by the Trust Center.
        /// The joining device need not set this.
        /// </summary>
        EMBER_TRUST_CENTER_USES_HASHED_LINK_KEY = 0x0084,
        
        /// <summary>
        ///  [256] This denotes that the preconfiguredKey element has valid data that should be used to
        /// configure the initial security state.
        /// </summary>
        EMBER_HAVE_PRECONFIGURED_KEY = 0x0100,
        
        /// <summary>
        ///  [512] This denotes that the networkKey element has valid data that should be used to
        /// configure the initial security state.
        /// </summary>
        EMBER_HAVE_NETWORK_KEY = 0x0200,
        
        /// <summary>
        ///  [1024] This denotes to a joining node that it should attempt to acquire a Trust Center Link Key
        /// during joining. This is only necessary if the device does not have a pre-configured key.
        /// </summary>
        EMBER_GET_LINK_KEY_WHEN_JOINING = 0x0400,
        
        /// <summary>
        ///  [2048] This denotes that a joining device should only accept an encrypted network key from
        /// the Trust Center (using its preconfigured key). A key sent in-the-clear by the Trust Center
        /// will be rejected and the join will fail. This option is only valid when utilizing a
        /// pre-configured key.
        /// </summary>
        EMBER_REQUIRE_ENCRYPTED_KEY = 0x0800,
        
        /// <summary>
        ///  [4096] This denotes whether the device should NOT reset its outgoing frame counters (both
        /// NWK and APS) when ::emberSetInitialSecurityState() is called. Normally it is advised to
        /// reset the frame counter before joining a new network. However in cases where a device is
        /// joining to the same network a again (but not using ::emberRejoinNetwork()) it should keep
        /// the NWK and APS frame counters stored in its tokens.
        /// </summary>
        EMBER_NO_FRAME_COUNTER_RESET = 0x1000,
        
        /// <summary>
        ///  [8192] This denotes that the device should obtain its preconfigured key from an
        /// installation code stored in the manufacturing token. The token contains a value that will be
        /// hashed to obtain the actual preconfigured key. If that token is not valid, then the call to
        /// emberSetInitialSecurityState() will fail.
        /// </summary>
        EMBER_GET_PRECONFIGURED_KEY_FROM_INSTALL_CODE = 0x2000,
    }
}
