//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Class to implement the Ember Structure " EmberApsFrame ".
    /// ZigBee APS frame parameters.
    /// </summary>
    public class EmberApsFrame
    {
        
        /// <summary>
        ///  The application profile ID that describes the format of the message.
        /// </summary>
        private int _profileId;
        
        /// <summary>
        ///  The cluster ID for this message
        /// </summary>
        private int _clusterId;
        
        /// <summary>
        ///  The source endpoint.
        /// </summary>
        private int _sourceEndpoint;
        
        /// <summary>
        ///  The destination endpoint.
        /// </summary>
        private int _destinationEndpoint;
        
        /// <summary>
        ///  A bitmask of options.
        /// </summary>
        private HashSet<EmberApsOption> _options = new HashSet<EmberApsOption>();
        
        /// <summary>
        ///  The group ID for this message, if it is multicast mode.
        /// </summary>
        private int _groupId;
        
        /// <summary>
        ///  The sequence number.
        /// </summary>
        private int _sequence;
        
        public EmberApsFrame()
        {
        }
        
        public EmberApsFrame(EzspDeserializer deserializer)
        {
            Deserialize(deserializer);
        }
        
        /// <summary>
        /// The profileId to set as <see cref="uint16_t"/> </summary>
        public void SetProfileId(int profileId)
        {
            _profileId = profileId;
        }
        
        /// <summary>
        /// The clusterId to set as <see cref="uint16_t"/> </summary>
        public void SetClusterId(int clusterId)
        {
            _clusterId = clusterId;
        }
        
        /// <summary>
        /// The sourceEndpoint to set as <see cref="uint8_t"/> </summary>
        public void SetSourceEndpoint(int sourceEndpoint)
        {
            _sourceEndpoint = sourceEndpoint;
        }
        
        /// <summary>
        /// The destinationEndpoint to set as <see cref="uint8_t"/> </summary>
        public void SetDestinationEndpoint(int destinationEndpoint)
        {
            _destinationEndpoint = destinationEndpoint;
        }
        
        /// <summary>
        /// The options to add to the set as <see cref="EmberApsOption"/> </summary>
        public void AddOptions(EmberApsOption options)
        {
            _options.Add(options);
        }
        
        /// <summary>
        /// The options to remove to the set as <see cref="EmberApsOption"/> </summary>
        public void RemoveOptions(EmberApsOption options)
        {
            _options.Remove(options);
        }
        
        /// <summary>
        /// The options to set to the set as <see cref="EmberApsOption"/> </summary>
        public void SetOptions(IEnumerable<EmberApsOption> options)
        {
            _options.UnionWith(options);
        }
        
        /// <summary>
        /// The groupId to set as <see cref="uint16_t"/> </summary>
        public void SetGroupId(int groupId)
        {
            _groupId = groupId;
        }
        
        /// <summary>
        /// The sequence to set as <see cref="uint8_t"/> </summary>
        public void SetSequence(int sequence)
        {
            _sequence = sequence;
        }
        
        /// <summary>
        ///  The application profile ID that describes the format of the message.
        /// Return the profileId as <see cref="System.Int32"/>
        /// </summary>
        public int GetProfileId()
        {
            return _profileId;
        }
        
        /// <summary>
        ///  The cluster ID for this message
        /// Return the clusterId as <see cref="System.Int32"/>
        /// </summary>
        public int GetClusterId()
        {
            return _clusterId;
        }
        
        /// <summary>
        ///  The source endpoint.
        /// Return the sourceEndpoint as <see cref="System.Int32"/>
        /// </summary>
        public int GetSourceEndpoint()
        {
            return _sourceEndpoint;
        }
        
        /// <summary>
        ///  The destination endpoint.
        /// Return the destinationEndpoint as <see cref="System.Int32"/>
        /// </summary>
        public int GetDestinationEndpoint()
        {
            return _destinationEndpoint;
        }
        
        /// <summary>
        ///  A bitmask of options.
        /// Return the options as a set of <see cref="EmberApsOption"/>
        /// </summary>
        public HashSet<EmberApsOption> GetOptions()
        {
            return _options;
        }
        
        /// <summary>
        ///  The group ID for this message, if it is multicast mode.
        /// Return the groupId as <see cref="System.Int32"/>
        /// </summary>
        public int GetGroupId()
        {
            return _groupId;
        }
        
        /// <summary>
        ///  The sequence number.
        /// Return the sequence as <see cref="System.Int32"/>
        /// </summary>
        public int GetSequence()
        {
            return _sequence;
        }
        
        /// <summary>
        /// Serialise the contents of the EZSP structure. </summary>
        public int[] Serialize(EzspSerializer serializer)
        {
            serializer.SerializeUInt16(_profileId);
            serializer.SerializeUInt16(_clusterId);
            serializer.SerializeUInt8(_sourceEndpoint);
            serializer.SerializeUInt8(_destinationEndpoint);
            serializer.SerializeEmberApsOption(_options);
            serializer.SerializeUInt16(_groupId);
            serializer.SerializeUInt8(_sequence);
            return serializer.GetPayload();
        }
        
        /// <summary>
        /// Deserialise the contents of the EZSP structure. </summary>
        public void Deserialize(EzspDeserializer deserializer)
        {
            _profileId = deserializer.DeserializeUInt16();
            _clusterId = deserializer.DeserializeUInt16();
            _sourceEndpoint = deserializer.DeserializeUInt8();
            _destinationEndpoint = deserializer.DeserializeUInt8();
            _options = deserializer.DeserializeEmberApsOption();
            _groupId = deserializer.DeserializeUInt16();
            _sequence = deserializer.DeserializeUInt8();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EmberApsFrame [profileId=");
            builder.Append(string.Format("0x{0:X04}", _profileId));
            builder.Append(", clusterId=");
            builder.Append(string.Format("0x{0:X04}", _clusterId));
            builder.Append(", sourceEndpoint=");
            builder.Append(_sourceEndpoint);
            builder.Append(", destinationEndpoint=");
            builder.Append(_destinationEndpoint);
            builder.Append(", options=");
            builder.Append(_options);
            builder.Append(", groupId=");
            builder.Append(_groupId);
            builder.Append(", sequence=");
            builder.Append(string.Format("0x{0:X02}", _sequence));
            builder.Append(']');
            return builder.ToString();
        }
    }
}
