//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Class to implement the Ember Structure " EmberInitialSecurityState ".
    /// The security data used to set the configuration for the stack, or the retrieved
    /// configuration currently in use.
    /// </summary>
    public class EmberInitialSecurityState
    {
        
        /// <summary>
        ///  A bitmask indicating the security state used to indicate what the security configuration
        /// will be when the device forms or joins the network.
        /// </summary>
        private HashSet<EmberInitialSecurityBitmask> _bitmask = new HashSet<EmberInitialSecurityBitmask>();
        
        /// <summary>
        ///  The pre-configured Key data that should be used when forming or joining the network. The
        /// security bitmask must be set with the EMBER_HAVE_PRECONFIGURED_KEY bit to indicate that
        /// the key contains valid data.
        /// </summary>
        private EmberKeyData _preconfiguredKey;
        
        /// <summary>
        ///  The Network Key that should be used by the Trust Center when it forms the network, or the
        /// Network Key currently in use by a joined device. The security bitmask must be set with
        /// EMBER_HAVE_NETWORK_KEY to indicate that the key contains valid data.
        /// </summary>
        private EmberKeyData _networkKey;
        
        /// <summary>
        ///  The sequence number associated with the network key. This is only valid if the
        /// EMBER_HAVE_NETWORK_KEY has been set in the security bitmask.
        /// </summary>
        private int _networkKeySequenceNumber;
        
        /// <summary>
        ///  This is the long address of the trust center on the network that will be joined. It is usually
        /// NOT set prior to joining the network and instead it is learned during the joining message
        /// exchange. This field is only examined if EMBER_HAVE_TRUST_CENTER_EUI64 is set in the
        /// EmberInitialSecurityState::bitmask. Most devices should clear that bit and leave this
        /// field alone. This field must be set when using commissioning mode.
        /// </summary>
        private IeeeAddress _preconfiguredTrustCenterEui64;
        
        public EmberInitialSecurityState()
        {
        }
        
        public EmberInitialSecurityState(EzspDeserializer deserializer)
        {
            Deserialize(deserializer);
        }
        
        /// <summary>
        /// The bitmask to add to the set as <see cref="EmberInitialSecurityBitmask"/> </summary>
        public void AddBitmask(EmberInitialSecurityBitmask bitmask)
        {
            _bitmask.Add(bitmask);
        }
        
        /// <summary>
        /// The bitmask to remove to the set as <see cref="EmberInitialSecurityBitmask"/> </summary>
        public void RemoveBitmask(EmberInitialSecurityBitmask bitmask)
        {
            _bitmask.Remove(bitmask);
        }
        
        /// <summary>
        /// The bitmask to set to the set as <see cref="EmberInitialSecurityBitmask"/> </summary>
        public void SetBitmask(IEnumerable<EmberInitialSecurityBitmask> bitmask)
        {
            _bitmask.UnionWith(bitmask);
        }
        
        /// <summary>
        /// The preconfiguredKey to set as <see cref="EmberKeyData"/> </summary>
        public void SetPreconfiguredKey(EmberKeyData preconfiguredKey)
        {
            _preconfiguredKey = preconfiguredKey;
        }
        
        /// <summary>
        /// The networkKey to set as <see cref="EmberKeyData"/> </summary>
        public void SetNetworkKey(EmberKeyData networkKey)
        {
            _networkKey = networkKey;
        }
        
        /// <summary>
        /// The networkKeySequenceNumber to set as <see cref="uint8_u"/> </summary>
        public void SetNetworkKeySequenceNumber(int networkKeySequenceNumber)
        {
            _networkKeySequenceNumber = networkKeySequenceNumber;
        }
        
        /// <summary>
        /// The preconfiguredTrustCenterEui64 to set as <see cref="EmberEUI64"/> </summary>
        public void SetPreconfiguredTrustCenterEui64(IeeeAddress preconfiguredTrustCenterEui64)
        {
            _preconfiguredTrustCenterEui64 = preconfiguredTrustCenterEui64;
        }
        
        /// <summary>
        ///  A bitmask indicating the security state used to indicate what the security configuration
        /// will be when the device forms or joins the network.
        /// Return the bitmask as a set of <see cref="EmberInitialSecurityBitmask"/>
        /// </summary>
        public HashSet<EmberInitialSecurityBitmask> GetBitmask()
        {
            return _bitmask;
        }
        
        /// <summary>
        ///  The pre-configured Key data that should be used when forming or joining the network. The
        /// security bitmask must be set with the EMBER_HAVE_PRECONFIGURED_KEY bit to indicate that
        /// the key contains valid data.
        /// Return the preconfiguredKey as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetPreconfiguredKey()
        {
            return _preconfiguredKey;
        }
        
        /// <summary>
        ///  The Network Key that should be used by the Trust Center when it forms the network, or the
        /// Network Key currently in use by a joined device. The security bitmask must be set with
        /// EMBER_HAVE_NETWORK_KEY to indicate that the key contains valid data.
        /// Return the networkKey as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetNetworkKey()
        {
            return _networkKey;
        }
        
        /// <summary>
        ///  The sequence number associated with the network key. This is only valid if the
        /// EMBER_HAVE_NETWORK_KEY has been set in the security bitmask.
        /// Return the networkKeySequenceNumber as <see cref="System.Int32"/>
        /// </summary>
        public int GetNetworkKeySequenceNumber()
        {
            return _networkKeySequenceNumber;
        }
        
        /// <summary>
        ///  This is the long address of the trust center on the network that will be joined. It is usually
        /// NOT set prior to joining the network and instead it is learned during the joining message
        /// exchange. This field is only examined if EMBER_HAVE_TRUST_CENTER_EUI64 is set in the
        /// EmberInitialSecurityState::bitmask. Most devices should clear that bit and leave this
        /// field alone. This field must be set when using commissioning mode.
        /// Return the preconfiguredTrustCenterEui64 as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetPreconfiguredTrustCenterEui64()
        {
            return _preconfiguredTrustCenterEui64;
        }
        
        /// <summary>
        /// Serialise the contents of the EZSP structure. </summary>
        public int[] Serialize(EzspSerializer serializer)
        {
            serializer.SerializeEmberInitialSecurityBitmask(_bitmask);
            serializer.SerializeEmberKeyData(_preconfiguredKey);
            serializer.SerializeEmberKeyData(_networkKey);
            serializer.SerializeUInt8(_networkKeySequenceNumber);
            serializer.SerializeEmberEui64(_preconfiguredTrustCenterEui64);
            return serializer.GetPayload();
        }
        
        /// <summary>
        /// Deserialise the contents of the EZSP structure. </summary>
        public void Deserialize(EzspDeserializer deserializer)
        {
            _bitmask = deserializer.DeserializeEmberInitialSecurityBitmask();
            _preconfiguredKey = deserializer.DeserializeEmberKeyData();
            _networkKey = deserializer.DeserializeEmberKeyData();
            _networkKeySequenceNumber = deserializer.DeserializeUInt8();
            _preconfiguredTrustCenterEui64 = deserializer.DeserializeEmberEui64();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EmberInitialSecurityState [bitmask=");
            builder.Append(_bitmask);
            builder.Append(", preconfiguredKey=");
            builder.Append(_preconfiguredKey);
            builder.Append(", networkKey=");
            builder.Append(_networkKey);
            builder.Append(", networkKeySequenceNumber=");
            builder.Append(_networkKeySequenceNumber);
            builder.Append(", preconfiguredTrustCenterEui64=");
            builder.Append(_preconfiguredTrustCenterEui64);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
