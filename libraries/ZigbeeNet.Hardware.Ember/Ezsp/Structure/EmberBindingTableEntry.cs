//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember Structure " EmberBindingTableEntry ".
    /// An entry in the binding table.
    /// </summary>
    public class EmberBindingTableEntry
    {
        
        /// <summary>
        ///  The type of binding.
        /// </summary>
        private EmberBindingType _type;
        
        /// <summary>
        ///  The endpoint on the local node.
        /// </summary>
        private int _local;
        
        /// <summary>
        ///  A cluster ID that matches one from the local endpoint's simple descriptor. This cluster ID is
        /// set by the provisioning application to indicate which part an endpoint's functionality is
        /// bound to this particular remote node and is used to distinguish between unicast and
        /// multicast bindings. Note that a binding can be used to send messages with any cluster ID, not
        /// just that listed in the binding.
        /// </summary>
        private int _clusterId;
        
        /// <summary>
        ///  The endpoint on the remote node (specified by identifier).
        /// </summary>
        private int _remote;
        
        /// <summary>
        ///  A 64-bit identifier. This is either the destination EUI64 (for unicasts) or the 64-bit group
        /// address (for multicasts).
        /// </summary>
        private IeeeAddress _identifier;
        
        /// <summary>
        ///  The index of the network the binding belongs to.
        /// </summary>
        private int _uint8_t;
        
        public EmberBindingTableEntry()
        {
        }
        
        public EmberBindingTableEntry(EzspDeserializer deserializer)
        {
            Deserialize(deserializer);
        }
        
        /// <summary>
        /// The type to set as <see cref="EmberBindingType"/> </summary>
        public void SetType(EmberBindingType type)
        {
            _type = type;
        }
        
        /// <summary>
        /// The local to set as <see cref="uint8_t"/> </summary>
        public void SetLocal(int local)
        {
            _local = local;
        }
        
        /// <summary>
        /// The clusterId to set as <see cref="uint16_t"/> </summary>
        public void SetClusterId(int clusterId)
        {
            _clusterId = clusterId;
        }
        
        /// <summary>
        /// The remote to set as <see cref="uint8_t"/> </summary>
        public void SetRemote(int remote)
        {
            _remote = remote;
        }
        
        /// <summary>
        /// The identifier to set as <see cref="EmberEUI64"/> </summary>
        public void SetIdentifier(IeeeAddress identifier)
        {
            _identifier = identifier;
        }
        
        /// <summary>
        /// The uint8_t to set as <see cref="uint8_t"/> </summary>
        public void SetUint8_t(int uint8_t)
        {
            _uint8_t = uint8_t;
        }
        
        /// <summary>
        ///  The type of binding.
        /// Return the type as <see cref="EmberBindingType"/>
        /// </summary>
        public EmberBindingType GetType2()
        {
            return _type;
        }
        
        /// <summary>
        ///  The endpoint on the local node.
        /// Return the local as <see cref="System.Int32"/>
        /// </summary>
        public int GetLocal()
        {
            return _local;
        }
        
        /// <summary>
        ///  A cluster ID that matches one from the local endpoint's simple descriptor. This cluster ID is
        /// set by the provisioning application to indicate which part an endpoint's functionality is
        /// bound to this particular remote node and is used to distinguish between unicast and
        /// multicast bindings. Note that a binding can be used to send messages with any cluster ID, not
        /// just that listed in the binding.
        /// Return the clusterId as <see cref="System.Int32"/>
        /// </summary>
        public int GetClusterId()
        {
            return _clusterId;
        }
        
        /// <summary>
        ///  The endpoint on the remote node (specified by identifier).
        /// Return the remote as <see cref="System.Int32"/>
        /// </summary>
        public int GetRemote()
        {
            return _remote;
        }
        
        /// <summary>
        ///  A 64-bit identifier. This is either the destination EUI64 (for unicasts) or the 64-bit group
        /// address (for multicasts).
        /// Return the identifier as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetIdentifier()
        {
            return _identifier;
        }
        
        /// <summary>
        ///  The index of the network the binding belongs to.
        /// Return the uint8_t as <see cref="System.Int32"/>
        /// </summary>
        public int GetUint8_t()
        {
            return _uint8_t;
        }
        
        /// <summary>
        /// Serialise the contents of the EZSP structure. </summary>
        public int[] Serialize(EzspSerializer serializer)
        {
            serializer.SerializeEmberBindingType(_type);
            serializer.SerializeUInt8(_local);
            serializer.SerializeUInt16(_clusterId);
            serializer.SerializeUInt8(_remote);
            serializer.SerializeEmberEui64(_identifier);
            serializer.SerializeUInt8(_uint8_t);
            return serializer.GetPayload();
        }
        
        /// <summary>
        /// Deserialise the contents of the EZSP structure. </summary>
        public void Deserialize(EzspDeserializer deserializer)
        {
            _type = deserializer.DeserializeEmberBindingType();
            _local = deserializer.DeserializeUInt8();
            _clusterId = deserializer.DeserializeUInt16();
            _remote = deserializer.DeserializeUInt8();
            _identifier = deserializer.DeserializeEmberEui64();
            _uint8_t = deserializer.DeserializeUInt8();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EmberBindingTableEntry [type=");
            builder.Append(_type);
            builder.Append(", local=");
            builder.Append(_local);
            builder.Append(", clusterId=");
            builder.Append(string.Format("0x{0:X04}", _clusterId));
            builder.Append(", remote=");
            builder.Append(_remote);
            builder.Append(", identifier=");
            builder.Append(_identifier);
            builder.Append(", uint8_t=");
            builder.Append(_uint8_t);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
