//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember Structure " EmberGpProxyTableEntry ".
    /// The internal representation of a proxy table entry.
    /// </summary>
    public class EmberGpProxyTableEntry
    {
        
        /// <summary>
        ///  The link key to be used to secure this pairing link.
        /// </summary>
        private EmberKeyData _securityLinkKey;
        
        /// <summary>
        ///  Internal status of the proxy table entry.
        /// </summary>
        private EmberGpProxyTableEntryStatus _status;
        
        /// <summary>
        ///  The tunneling options (this contains both options and extendedOptions from the spec).
        /// </summary>
        private int _options;
        
        /// <summary>
        ///  The GPD endpoint.
        /// </summary>
        private EmberGpAddress _gpd;
        
        /// <summary>
        ///  The assigned alias for the GPD.
        /// </summary>
        private int _assignedAlias;
        
        /// <summary>
        ///  The security options field.
        /// </summary>
        private int _securityOptions;
        
        /// <summary>
        ///  The security frame counter of the GPD.
        /// </summary>
        private int _gpdSecurityFrameCounter;
        
        /// <summary>
        ///  The key to use for GPD.
        /// </summary>
        private EmberKeyData _gpdKey;
        
        /// <summary>
        ///  The list of sinks (hardcoded to 2 which is the spec minimum).
        /// </summary>
        private EmberGpSinkListEntry[] _sinkList;
        
        /// <summary>
        ///  The groupcast radius.
        /// </summary>
        private int _groupcastRadius;
        
        /// <summary>
        ///  The search counter.
        /// </summary>
        private int _searchCounter;
        
        public EmberGpProxyTableEntry()
        {
        }
        
        public EmberGpProxyTableEntry(EzspDeserializer deserializer)
        {
            Deserialize(deserializer);
        }
        
        /// <summary>
        /// The securityLinkKey to set as <see cref="EmberKeyData"/> </summary>
        public void SetSecurityLinkKey(EmberKeyData securityLinkKey)
        {
            _securityLinkKey = securityLinkKey;
        }
        
        /// <summary>
        /// The status to set as <see cref="EmberGpProxyTableEntryStatus"/> </summary>
        public void SetStatus(EmberGpProxyTableEntryStatus status)
        {
            _status = status;
        }
        
        /// <summary>
        /// The options to set as <see cref="uint32_t"/> </summary>
        public void SetOptions(int options)
        {
            _options = options;
        }
        
        /// <summary>
        /// The gpd to set as <see cref="EmberGpAddress"/> </summary>
        public void SetGpd(EmberGpAddress gpd)
        {
            _gpd = gpd;
        }
        
        /// <summary>
        /// The assignedAlias to set as <see cref="EmberNodeId"/> </summary>
        public void SetAssignedAlias(int assignedAlias)
        {
            _assignedAlias = assignedAlias;
        }
        
        /// <summary>
        /// The securityOptions to set as <see cref="uint8_t"/> </summary>
        public void SetSecurityOptions(int securityOptions)
        {
            _securityOptions = securityOptions;
        }
        
        /// <summary>
        /// The gpdSecurityFrameCounter to set as <see cref="EmberGpSecurityFrameCounter"/> </summary>
        public void SetGpdSecurityFrameCounter(int gpdSecurityFrameCounter)
        {
            _gpdSecurityFrameCounter = gpdSecurityFrameCounter;
        }
        
        /// <summary>
        /// The gpdKey to set as <see cref="EmberKeyData"/> </summary>
        public void SetGpdKey(EmberKeyData gpdKey)
        {
            _gpdKey = gpdKey;
        }
        
        /// <summary>
        /// The sinkList to set as <see cref="EmberGpSinkListEntry[2]"/> </summary>
        public void SetSinkList(EmberGpSinkListEntry[] sinkList)
        {
            _sinkList = sinkList;
        }
        
        /// <summary>
        /// The groupcastRadius to set as <see cref="uint8_t"/> </summary>
        public void SetGroupcastRadius(int groupcastRadius)
        {
            _groupcastRadius = groupcastRadius;
        }
        
        /// <summary>
        /// The searchCounter to set as <see cref="uint8_t"/> </summary>
        public void SetSearchCounter(int searchCounter)
        {
            _searchCounter = searchCounter;
        }
        
        /// <summary>
        ///  The link key to be used to secure this pairing link.
        /// Return the securityLinkKey as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetSecurityLinkKey()
        {
            return _securityLinkKey;
        }
        
        /// <summary>
        ///  Internal status of the proxy table entry.
        /// Return the status as <see cref="EmberGpProxyTableEntryStatus"/>
        /// </summary>
        public EmberGpProxyTableEntryStatus GetStatus()
        {
            return _status;
        }
        
        /// <summary>
        ///  The tunneling options (this contains both options and extendedOptions from the spec).
        /// Return the options as <see cref="System.Int32"/>
        /// </summary>
        public int GetOptions()
        {
            return _options;
        }
        
        /// <summary>
        ///  The GPD endpoint.
        /// Return the gpd as <see cref="EmberGpAddress"/>
        /// </summary>
        public EmberGpAddress GetGpd()
        {
            return _gpd;
        }
        
        /// <summary>
        ///  The assigned alias for the GPD.
        /// Return the assignedAlias as <see cref="System.Int32"/>
        /// </summary>
        public int GetAssignedAlias()
        {
            return _assignedAlias;
        }
        
        /// <summary>
        ///  The security options field.
        /// Return the securityOptions as <see cref="System.Int32"/>
        /// </summary>
        public int GetSecurityOptions()
        {
            return _securityOptions;
        }
        
        /// <summary>
        ///  The security frame counter of the GPD.
        /// Return the gpdSecurityFrameCounter as <see cref="System.Int32"/>
        /// </summary>
        public int GetGpdSecurityFrameCounter()
        {
            return _gpdSecurityFrameCounter;
        }
        
        /// <summary>
        ///  The key to use for GPD.
        /// Return the gpdKey as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetGpdKey()
        {
            return _gpdKey;
        }
        
        /// <summary>
        ///  The list of sinks (hardcoded to 2 which is the spec minimum).
        /// Return the sinkList as <see cref="EmberGpSinkListEntry"/>
        /// </summary>
        public EmberGpSinkListEntry[] GetSinkList()
        {
            return _sinkList;
        }
        
        /// <summary>
        ///  The groupcast radius.
        /// Return the groupcastRadius as <see cref="System.Int32"/>
        /// </summary>
        public int GetGroupcastRadius()
        {
            return _groupcastRadius;
        }
        
        /// <summary>
        ///  The search counter.
        /// Return the searchCounter as <see cref="System.Int32"/>
        /// </summary>
        public int GetSearchCounter()
        {
            return _searchCounter;
        }
        
        /// <summary>
        /// Serialise the contents of the EZSP structure. </summary>
        public int[] Serialize(EzspSerializer serializer)
        {
            serializer.SerializeEmberKeyData(_securityLinkKey);
            serializer.SerializeEmberGpProxyTableEntryStatus(_status);
            serializer.SerializeUInt32(_options);
            serializer.SerializeEmberGpAddress(_gpd);
            serializer.SerializeUInt16(_assignedAlias);
            serializer.SerializeUInt8(_securityOptions);
            serializer.SerializeUInt32(_gpdSecurityFrameCounter);
            serializer.SerializeEmberKeyData(_gpdKey);
            serializer.SerializeEmberGpSinkListEntry(_sinkList);
            serializer.SerializeUInt8(_groupcastRadius);
            serializer.SerializeUInt8(_searchCounter);
            return serializer.GetPayload();
        }
        
        /// <summary>
        /// Deserialise the contents of the EZSP structure. </summary>
        public void Deserialize(EzspDeserializer deserializer)
        {
            _securityLinkKey = deserializer.DeserializeEmberKeyData();
            _status = deserializer.DeserializeEmberGpProxyTableEntryStatus();
            _options = deserializer.DeserializeUInt32();
            _gpd = deserializer.DeserializeEmberGpAddress();
            _assignedAlias = deserializer.DeserializeUInt16();
            _securityOptions = deserializer.DeserializeUInt8();
            _gpdSecurityFrameCounter = deserializer.DeserializeUInt32();
            _gpdKey = deserializer.DeserializeEmberKeyData();
            _sinkList = deserializer.DeserializeEmberGpSinkListEntry(2);
            _groupcastRadius = deserializer.DeserializeUInt8();
            _searchCounter = deserializer.DeserializeUInt8();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EmberGpProxyTableEntry [securityLinkKey=");
            builder.Append(_securityLinkKey);
            builder.Append(", status=");
            builder.Append(_status);
            builder.Append(", options=");
            builder.Append(_options);
            builder.Append(", gpd=");
            builder.Append(_gpd);
            builder.Append(", assignedAlias=");
            builder.Append(string.Format("0x{0:X04}", _assignedAlias));
            builder.Append(", securityOptions=");
            builder.Append(_securityOptions);
            builder.Append(", gpdSecurityFrameCounter=");
            builder.Append(_gpdSecurityFrameCounter);
            builder.Append(", gpdKey=");
            builder.Append(_gpdKey);
            builder.Append(", sinkList=");
            if (_sinkList == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _sinkList.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(_sinkList[cnt]);
                }
            }
            builder.Append(", groupcastRadius=");
            builder.Append(_groupcastRadius);
            builder.Append(", searchCounter=");
            builder.Append(_searchCounter);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
