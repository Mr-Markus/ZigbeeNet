//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Class to implement the Ember Structure " EmberCurrentSecurityState ".
    /// The security options and information currently used by the stack.
    /// </summary>
    public class EmberCurrentSecurityState
    {
        
        /// <summary>
        ///  A bitmask indicating the security options currently in use by a device joined in the network.
        /// </summary>
        private HashSet<EmberCurrentSecurityBitmask> _bitmask = new HashSet<EmberCurrentSecurityBitmask>();
        
        /// <summary>
        ///  The IEEE Address of the Trust Center device.
        /// </summary>
        private IeeeAddress _trustCenterLongAddress;
        
        public EmberCurrentSecurityState()
        {
        }
        
        public EmberCurrentSecurityState(EzspDeserializer deserializer)
        {
            Deserialize(deserializer);
        }
        
        /// <summary>
        /// The bitmask to add to the set as <see cref="EmberCurrentSecurityBitmask"/> </summary>
        public void AddBitmask(EmberCurrentSecurityBitmask bitmask)
        {
            _bitmask.Add(bitmask);
        }
        
        /// <summary>
        /// The bitmask to remove to the set as <see cref="EmberCurrentSecurityBitmask"/> </summary>
        public void RemoveBitmask(EmberCurrentSecurityBitmask bitmask)
        {
            _bitmask.Remove(bitmask);
        }
        
        /// <summary>
        /// The bitmask to set to the set as <see cref="EmberCurrentSecurityBitmask"/> </summary>
        public void SetBitmask(IEnumerable<EmberCurrentSecurityBitmask> bitmask)
        {
            _bitmask.UnionWith(bitmask);
        }
        
        /// <summary>
        /// The trustCenterLongAddress to set as <see cref="EmberEUI64"/> </summary>
        public void SetTrustCenterLongAddress(IeeeAddress trustCenterLongAddress)
        {
            _trustCenterLongAddress = trustCenterLongAddress;
        }
        
        /// <summary>
        ///  A bitmask indicating the security options currently in use by a device joined in the network.
        /// Return the bitmask as a set of <see cref="EmberCurrentSecurityBitmask"/>
        /// </summary>
        public HashSet<EmberCurrentSecurityBitmask> GetBitmask()
        {
            return _bitmask;
        }
        
        /// <summary>
        ///  The IEEE Address of the Trust Center device.
        /// Return the trustCenterLongAddress as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetTrustCenterLongAddress()
        {
            return _trustCenterLongAddress;
        }
        
        /// <summary>
        /// Serialise the contents of the EZSP structure. </summary>
        public int[] Serialize(EzspSerializer serializer)
        {
            serializer.SerializeEmberCurrentSecurityBitmask(_bitmask);
            serializer.SerializeEmberEui64(_trustCenterLongAddress);
            return serializer.GetPayload();
        }
        
        /// <summary>
        /// Deserialise the contents of the EZSP structure. </summary>
        public void Deserialize(EzspDeserializer deserializer)
        {
            _bitmask = deserializer.DeserializeEmberCurrentSecurityBitmask();
            _trustCenterLongAddress = deserializer.DeserializeEmberEui64();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EmberCurrentSecurityState [bitmask=");
            builder.Append(_bitmask);
            builder.Append(", trustCenterLongAddress=");
            builder.Append(_trustCenterLongAddress);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
