//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Structure
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Class to implement the Ember Structure " EmberKeyStruct ".
    /// A structure containing a key and its associated data.
    /// </summary>
    public class EmberKeyStruct
    {
        
        /// <summary>
        ///  A bitmask indicating the presence of data within the various fields in the structure.
        /// </summary>
        private HashSet<EmberKeyStructBitmask> _bitmask = new HashSet<EmberKeyStructBitmask>();
        
        /// <summary>
        ///  The type of the key.
        /// </summary>
        private EmberKeyType _type;
        
        /// <summary>
        ///  The actual key data.
        /// </summary>
        private EmberKeyData _key;
        
        /// <summary>
        ///  The outgoing frame counter associated with the key.
        /// </summary>
        private int _outgoingFrameCounter;
        
        /// <summary>
        ///  The frame counter of the partner device associated with the key.
        /// </summary>
        private int _incomingFrameCounter;
        
        /// <summary>
        ///  The sequence number associated with the key.
        /// </summary>
        private int _sequenceNumber;
        
        /// <summary>
        ///  The IEEE address of the partner device also in possession of the key.
        /// </summary>
        private IeeeAddress _partnerEUI64;
        
        public EmberKeyStruct()
        {
        }
        
        public EmberKeyStruct(EzspDeserializer deserializer)
        {
            Deserialize(deserializer);
        }
        
        /// <summary>
        /// The bitmask to add to the set as <see cref="EmberKeyStructBitmask"/> </summary>
        public void AddBitmask(EmberKeyStructBitmask bitmask)
        {
            _bitmask.Add(bitmask);
        }
        
        /// <summary>
        /// The bitmask to remove to the set as <see cref="EmberKeyStructBitmask"/> </summary>
        public void RemoveBitmask(EmberKeyStructBitmask bitmask)
        {
            _bitmask.Remove(bitmask);
        }
        
        /// <summary>
        /// The bitmask to set to the set as <see cref="EmberKeyStructBitmask"/> </summary>
        public void SetBitmask(IEnumerable<EmberKeyStructBitmask> bitmask)
        {
            _bitmask.UnionWith(bitmask);
        }
        
        /// <summary>
        /// The type to set as <see cref="EmberKeyType"/> </summary>
        public void SetType(EmberKeyType type)
        {
            _type = type;
        }
        
        /// <summary>
        /// The key to set as <see cref="EmberKeyData"/> </summary>
        public void SetKey(EmberKeyData key)
        {
            _key = key;
        }
        
        /// <summary>
        /// The outgoingFrameCounter to set as <see cref="uint32_t"/> </summary>
        public void SetOutgoingFrameCounter(int outgoingFrameCounter)
        {
            _outgoingFrameCounter = outgoingFrameCounter;
        }
        
        /// <summary>
        /// The incomingFrameCounter to set as <see cref="uint32_t"/> </summary>
        public void SetIncomingFrameCounter(int incomingFrameCounter)
        {
            _incomingFrameCounter = incomingFrameCounter;
        }
        
        /// <summary>
        /// The sequenceNumber to set as <see cref="uint8_t"/> </summary>
        public void SetSequenceNumber(int sequenceNumber)
        {
            _sequenceNumber = sequenceNumber;
        }
        
        /// <summary>
        /// The partnerEUI64 to set as <see cref="EmberEUI64"/> </summary>
        public void SetPartnerEUI64(IeeeAddress partnerEUI64)
        {
            _partnerEUI64 = partnerEUI64;
        }
        
        /// <summary>
        ///  A bitmask indicating the presence of data within the various fields in the structure.
        /// Return the bitmask as a set of <see cref="EmberKeyStructBitmask"/>
        /// </summary>
        public HashSet<EmberKeyStructBitmask> GetBitmask()
        {
            return _bitmask;
        }
        
        /// <summary>
        ///  The type of the key.
        /// Return the type as <see cref="EmberKeyType"/>
        /// </summary>
        public EmberKeyType GetType2()
        {
            return _type;
        }
        
        /// <summary>
        ///  The actual key data.
        /// Return the key as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetKey()
        {
            return _key;
        }
        
        /// <summary>
        ///  The outgoing frame counter associated with the key.
        /// Return the outgoingFrameCounter as <see cref="System.Int32"/>
        /// </summary>
        public int GetOutgoingFrameCounter()
        {
            return _outgoingFrameCounter;
        }
        
        /// <summary>
        ///  The frame counter of the partner device associated with the key.
        /// Return the incomingFrameCounter as <see cref="System.Int32"/>
        /// </summary>
        public int GetIncomingFrameCounter()
        {
            return _incomingFrameCounter;
        }
        
        /// <summary>
        ///  The sequence number associated with the key.
        /// Return the sequenceNumber as <see cref="System.Int32"/>
        /// </summary>
        public int GetSequenceNumber()
        {
            return _sequenceNumber;
        }
        
        /// <summary>
        ///  The IEEE address of the partner device also in possession of the key.
        /// Return the partnerEUI64 as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetPartnerEUI64()
        {
            return _partnerEUI64;
        }
        
        /// <summary>
        /// Serialise the contents of the EZSP structure. </summary>
        public int[] Serialize(EzspSerializer serializer)
        {
            serializer.SerializeEmberKeyStructBitmask(_bitmask);
            serializer.SerializeEmberKeyType(_type);
            serializer.SerializeEmberKeyData(_key);
            serializer.SerializeUInt32(_outgoingFrameCounter);
            serializer.SerializeUInt32(_incomingFrameCounter);
            serializer.SerializeUInt8(_sequenceNumber);
            serializer.SerializeEmberEui64(_partnerEUI64);
            return serializer.GetPayload();
        }
        
        /// <summary>
        /// Deserialise the contents of the EZSP structure. </summary>
        public void Deserialize(EzspDeserializer deserializer)
        {
            _bitmask = deserializer.DeserializeEmberKeyStructBitmask();
            _type = deserializer.DeserializeEmberKeyType();
            _key = deserializer.DeserializeEmberKeyData();
            _outgoingFrameCounter = deserializer.DeserializeUInt32();
            _incomingFrameCounter = deserializer.DeserializeUInt32();
            _sequenceNumber = deserializer.DeserializeUInt8();
            _partnerEUI64 = deserializer.DeserializeEmberEui64();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EmberKeyStruct [bitmask=");
            builder.Append(_bitmask);
            builder.Append(", type=");
            builder.Append(_type);
            builder.Append(", key=");
            builder.Append(_key);
            builder.Append(", outgoingFrameCounter=");
            builder.Append(string.Format("0x{0:X08}", _outgoingFrameCounter));
            builder.Append(", incomingFrameCounter=");
            builder.Append(string.Format("0x{0:X08}", _incomingFrameCounter));
            builder.Append(", sequenceNumber=");
            builder.Append(string.Format("0x{0:X02}", _sequenceNumber));
            builder.Append(", partnerEUI64=");
            builder.Append(_partnerEUI64);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
