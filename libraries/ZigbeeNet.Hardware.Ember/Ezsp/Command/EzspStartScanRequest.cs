//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " startScan ".
    /// This function will start a scan.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspStartScanRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 26;
        
        /// <summary>
        ///  Indicates the type of scan to be performed. Possible values are: EZSP_ENERGY_SCAN and
        /// EZSP_ACTIVE_SCAN. For each type, the respective callback for reporting results is:
        /// energyScanResultHandler and networkFoundHandler. The energy scan and active scan report
        /// errors and completion via the scanCompleteHandler
        /// </summary>
        private EzspNetworkScanType _scanType;
        
        /// <summary>
        ///  Bits set as 1 indicate that this particular channel should be scanned. Bits set to 0 indicate
        /// that this particular channel should not be scanned. For example, a channelMask value of
        /// 0x00000001 would indicate that only channel 0 should be scanned. Valid channels range from
        /// 11 to 26 inclusive. This translates to a channel mask value of 0x07FFF800. As a convenience, a
        /// value of 0 is reinterpreted as the mask for the current channel.
        /// </summary>
        private int _channelMask;
        
        /// <summary>
        ///  Sets the exponent of the number of scan periods, where a scan period is 960 symbols. The scan
        /// will occur for ((2^duration) + 1) scan periods.
        /// </summary>
        private int _duration;
        
        private EzspSerializer _serializer;
        
        public EzspStartScanRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The scanType to set as <see cref="EzspNetworkScanType"/> </summary>
        public void SetScanType(EzspNetworkScanType scanType)
        {
            _scanType = scanType;
        }
        
        /// <summary>
        /// The channelMask to set as <see cref="uint32_t"/> </summary>
        public void SetChannelMask(int channelMask)
        {
            _channelMask = channelMask;
        }
        
        /// <summary>
        /// The duration to set as <see cref="uint8_t"/> </summary>
        public void SetDuration(int duration)
        {
            _duration = duration;
        }
        
        /// <summary>
        ///  Indicates the type of scan to be performed. Possible values are: EZSP_ENERGY_SCAN and
        /// EZSP_ACTIVE_SCAN. For each type, the respective callback for reporting results is:
        /// energyScanResultHandler and networkFoundHandler. The energy scan and active scan report
        /// errors and completion via the scanCompleteHandler
        /// Return the scanType as <see cref="EzspNetworkScanType"/>
        /// </summary>
        public EzspNetworkScanType GetScanType()
        {
            return _scanType;
        }
        
        /// <summary>
        ///  Bits set as 1 indicate that this particular channel should be scanned. Bits set to 0 indicate
        /// that this particular channel should not be scanned. For example, a channelMask value of
        /// 0x00000001 would indicate that only channel 0 should be scanned. Valid channels range from
        /// 11 to 26 inclusive. This translates to a channel mask value of 0x07FFF800. As a convenience, a
        /// value of 0 is reinterpreted as the mask for the current channel.
        /// Return the channelMask as <see cref="System.Int32"/>
        /// </summary>
        public int GetChannelMask()
        {
            return _channelMask;
        }
        
        /// <summary>
        ///  Sets the exponent of the number of scan periods, where a scan period is 960 symbols. The scan
        /// will occur for ((2^duration) + 1) scan periods.
        /// Return the duration as <see cref="System.Int32"/>
        /// </summary>
        public int GetDuration()
        {
            return _duration;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeEzspNetworkScanType(_scanType);
            _serializer.SerializeUInt32(_channelMask);
            _serializer.SerializeUInt8(_duration);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspStartScanRequest [scanType=");
            builder.Append(_scanType);
            builder.Append(", channelMask=");
            builder.Append(string.Format("0x{0:X08}", _channelMask));
            builder.Append(", duration=");
            builder.Append(_duration);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
