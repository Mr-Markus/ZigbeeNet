//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " gpProxyTableProcessGpPairing ".
    /// Update the GP Proxy table based on a GP pairing.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspGpProxyTableProcessGpPairingResponse : EzspFrameResponse
    {
        
        public const int FRAME_ID = 201;
        
        /// <summary>
        ///  Whether a GP Pairing has been created or not.
        /// </summary>
        private bool _gpPairingAdded;
        
        public EzspGpProxyTableProcessGpPairingResponse(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _gpPairingAdded = deserializer.DeserializeBool();
        }
        
        /// <summary>
        /// The gpPairingAdded to set as <see cref="bool"/> </summary>
        public void SetGpPairingAdded(bool gpPairingAdded)
        {
            _gpPairingAdded = gpPairingAdded;
        }
        
        /// <summary>
        ///  Whether a GP Pairing has been created or not.
        /// Return the gpPairingAdded as <see cref="System.Boolean"/>
        /// </summary>
        public bool GetGpPairingAdded()
        {
            return _gpPairingAdded;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspGpProxyTableProcessGpPairingResponse [gpPairingAdded=");
            builder.Append(_gpPairingAdded);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
