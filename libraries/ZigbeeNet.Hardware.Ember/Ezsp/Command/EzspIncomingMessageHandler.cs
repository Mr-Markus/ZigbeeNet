//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " incomingMessageHandler ".
    /// A callback indicating a message has been received.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspIncomingMessageHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 69;
        
        /// <summary>
        ///  The type of the incoming message. One of the following: EMBER_INCOMING_UNICAST,
        /// EMBER_INCOMING_UNICAST_REPLY, EMBER_INCOMING_MULTICAST,
        /// EMBER_INCOMING_MULTICAST_LOOPBACK, EMBER_INCOMING_BROADCAST,
        /// EMBER_INCOMING_BROADCAST_LOOPBACK
        /// </summary>
        private EmberIncomingMessageType _type;
        
        /// <summary>
        ///  The APS frame for the message.
        /// </summary>
        private EmberApsFrame _apsFrame;
        
        /// <summary>
        ///  The link quality from the node that last relayed the message.
        /// </summary>
        private int _lastHopLqi;
        
        /// <summary>
        ///  The energy level (in units of dBm) observed during the reception.
        /// </summary>
        private int _lastHopRssi;
        
        /// <summary>
        ///  The sender of the message.
        /// </summary>
        private int _sender;
        
        /// <summary>
        ///  The index of a binding that matches the message or 0xFF if there is no matching binding.
        /// </summary>
        private int _bindingIndex;
        
        /// <summary>
        ///  The index of the entry in the address table that matches the sender of the message or 0xFF if
        /// there is no matching entry.
        /// </summary>
        private int _addressIndex;
        
        /// <summary>
        ///  The incoming message.
        /// </summary>
        private int[] _messageContents;
        
        public EzspIncomingMessageHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _type = deserializer.DeserializeEmberIncomingMessageType();
            _apsFrame = deserializer.DeserializeEmberApsFrame();
            _lastHopLqi = deserializer.DeserializeUInt8();
            _lastHopRssi = deserializer.DeserializeInt8S();
            _sender = deserializer.DeserializeUInt16();
            _bindingIndex = deserializer.DeserializeUInt8();
            _addressIndex = deserializer.DeserializeUInt8();
            int messageLength = deserializer.DeserializeUInt8();
            _messageContents = deserializer.DeserializeUInt8Array(messageLength);
        }
        
        /// <summary>
        /// The type to set as <see cref="EmberIncomingMessageType"/> </summary>
        public void SetType(EmberIncomingMessageType type)
        {
            _type = type;
        }
        
        /// <summary>
        /// The apsFrame to set as <see cref="EmberApsFrame"/> </summary>
        public void SetApsFrame(EmberApsFrame apsFrame)
        {
            _apsFrame = apsFrame;
        }
        
        /// <summary>
        /// The lastHopLqi to set as <see cref="uint8_t"/> </summary>
        public void SetLastHopLqi(int lastHopLqi)
        {
            _lastHopLqi = lastHopLqi;
        }
        
        /// <summary>
        /// The lastHopRssi to set as <see cref="int8s"/> </summary>
        public void SetLastHopRssi(int lastHopRssi)
        {
            _lastHopRssi = lastHopRssi;
        }
        
        /// <summary>
        /// The sender to set as <see cref="EmberNodeId"/> </summary>
        public void SetSender(int sender)
        {
            _sender = sender;
        }
        
        /// <summary>
        /// The bindingIndex to set as <see cref="uint8_t"/> </summary>
        public void SetBindingIndex(int bindingIndex)
        {
            _bindingIndex = bindingIndex;
        }
        
        /// <summary>
        /// The addressIndex to set as <see cref="uint8_t"/> </summary>
        public void SetAddressIndex(int addressIndex)
        {
            _addressIndex = addressIndex;
        }
        
        /// <summary>
        /// The messageContents to set as <see cref="uint8_t[]"/> </summary>
        public void SetMessageContents(int[] messageContents)
        {
            _messageContents = messageContents;
        }
        
        /// <summary>
        ///  The type of the incoming message. One of the following: EMBER_INCOMING_UNICAST,
        /// EMBER_INCOMING_UNICAST_REPLY, EMBER_INCOMING_MULTICAST,
        /// EMBER_INCOMING_MULTICAST_LOOPBACK, EMBER_INCOMING_BROADCAST,
        /// EMBER_INCOMING_BROADCAST_LOOPBACK
        /// Return the type as <see cref="EmberIncomingMessageType"/>
        /// </summary>
        public EmberIncomingMessageType GetType2()
        {
            return _type;
        }
        
        /// <summary>
        ///  The APS frame for the message.
        /// Return the apsFrame as <see cref="EmberApsFrame"/>
        /// </summary>
        public EmberApsFrame GetApsFrame()
        {
            return _apsFrame;
        }
        
        /// <summary>
        ///  The link quality from the node that last relayed the message.
        /// Return the lastHopLqi as <see cref="System.Int32"/>
        /// </summary>
        public int GetLastHopLqi()
        {
            return _lastHopLqi;
        }
        
        /// <summary>
        ///  The energy level (in units of dBm) observed during the reception.
        /// Return the lastHopRssi as <see cref="System.Int32"/>
        /// </summary>
        public int GetLastHopRssi()
        {
            return _lastHopRssi;
        }
        
        /// <summary>
        ///  The sender of the message.
        /// Return the sender as <see cref="System.Int32"/>
        /// </summary>
        public int GetSender()
        {
            return _sender;
        }
        
        /// <summary>
        ///  The index of a binding that matches the message or 0xFF if there is no matching binding.
        /// Return the bindingIndex as <see cref="System.Int32"/>
        /// </summary>
        public int GetBindingIndex()
        {
            return _bindingIndex;
        }
        
        /// <summary>
        ///  The index of the entry in the address table that matches the sender of the message or 0xFF if
        /// there is no matching entry.
        /// Return the addressIndex as <see cref="System.Int32"/>
        /// </summary>
        public int GetAddressIndex()
        {
            return _addressIndex;
        }
        
        /// <summary>
        ///  The incoming message.
        /// Return the messageContents as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetMessageContents()
        {
            return _messageContents;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspIncomingMessageHandler [type=");
            builder.Append(_type);
            builder.Append(", apsFrame=");
            builder.Append(_apsFrame);
            builder.Append(", lastHopLqi=");
            builder.Append(_lastHopLqi);
            builder.Append(", lastHopRssi=");
            builder.Append(_lastHopRssi);
            builder.Append(", sender=");
            builder.Append(string.Format("0x{0:X04}", _sender));
            builder.Append(", bindingIndex=");
            builder.Append(_bindingIndex);
            builder.Append(", addressIndex=");
            builder.Append(_addressIndex);
            builder.Append(", messageContents=");
            if (_messageContents == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _messageContents.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X02}", _messageContents[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
