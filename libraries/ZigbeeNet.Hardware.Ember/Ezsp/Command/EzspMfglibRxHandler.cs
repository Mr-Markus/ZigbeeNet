//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " mfglibRxHandler ".
    /// A callback indicating a packet with a valid CRC has been received.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspMfglibRxHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 142;
        
        /// <summary>
        ///  The link quality observed during the reception.
        /// </summary>
        private int _linkQuality;
        
        /// <summary>
        ///  The energy level (in units of dBm) observed during the reception.
        /// </summary>
        private int _rssi;
        
        /// <summary>
        ///  The received packet. The last two bytes are the 16-bit CRC.
        /// </summary>
        private int[] _packetContents;
        
        public EzspMfglibRxHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _linkQuality = deserializer.DeserializeUInt8();
            _rssi = deserializer.DeserializeInt8S();
            int packetLength = deserializer.DeserializeUInt8();
            _packetContents = deserializer.DeserializeUInt8Array(packetLength);
        }
        
        /// <summary>
        /// The linkQuality to set as <see cref="uint8_t"/> </summary>
        public void SetLinkQuality(int linkQuality)
        {
            _linkQuality = linkQuality;
        }
        
        /// <summary>
        /// The rssi to set as <see cref="int8s"/> </summary>
        public void SetRssi(int rssi)
        {
            _rssi = rssi;
        }
        
        /// <summary>
        /// The packetContents to set as <see cref="uint8_t[]"/> </summary>
        public void SetPacketContents(int[] packetContents)
        {
            _packetContents = packetContents;
        }
        
        /// <summary>
        ///  The link quality observed during the reception.
        /// Return the linkQuality as <see cref="System.Int32"/>
        /// </summary>
        public int GetLinkQuality()
        {
            return _linkQuality;
        }
        
        /// <summary>
        ///  The energy level (in units of dBm) observed during the reception.
        /// Return the rssi as <see cref="System.Int32"/>
        /// </summary>
        public int GetRssi()
        {
            return _rssi;
        }
        
        /// <summary>
        ///  The received packet. The last two bytes are the 16-bit CRC.
        /// Return the packetContents as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetPacketContents()
        {
            return _packetContents;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspMfglibRxHandler [linkQuality=");
            builder.Append(_linkQuality);
            builder.Append(", rssi=");
            builder.Append(_rssi);
            builder.Append(", packetContents=");
            if (_packetContents == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _packetContents.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X02}", _packetContents[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
