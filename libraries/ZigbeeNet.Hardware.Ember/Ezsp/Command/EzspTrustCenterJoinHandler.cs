//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " trustCenterJoinHandler ".
    /// The NCP used the trust center behavior policy to decide whether to allow a new node to join the
    /// network. The Host cannot change the current decision, but it can change the policy for future
    /// decisions using the setPolicy command.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspTrustCenterJoinHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 36;
        
        /// <summary>
        ///  The Node Id of the node whose status changed.
        /// </summary>
        private int _newNodeId;
        
        /// <summary>
        ///  The EUI64 of the node whose status changed.
        /// </summary>
        private IeeeAddress _newNodeEui64;
        
        /// <summary>
        ///  The status of the node: Secure Join/Rejoin, Unsecure Join/Rejoin, Device left.
        /// </summary>
        private EmberDeviceUpdate _status;
        
        /// <summary>
        ///  An EmberJoinDecision reflecting the decision made.
        /// </summary>
        private EmberJoinDecision _policyDecision;
        
        /// <summary>
        ///  The parent of the node whose status has changed.
        /// </summary>
        private int _parentOfNewNodeId;
        
        public EzspTrustCenterJoinHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _newNodeId = deserializer.DeserializeUInt16();
            _newNodeEui64 = deserializer.DeserializeEmberEui64();
            _status = deserializer.DeserializeEmberDeviceUpdate();
            _policyDecision = deserializer.DeserializeEmberJoinDecision();
            _parentOfNewNodeId = deserializer.DeserializeUInt16();
        }
        
        /// <summary>
        /// The newNodeId to set as <see cref="EmberNodeId"/> </summary>
        public void SetNewNodeId(int newNodeId)
        {
            _newNodeId = newNodeId;
        }
        
        /// <summary>
        /// The newNodeEui64 to set as <see cref="EmberEUI64"/> </summary>
        public void SetNewNodeEui64(IeeeAddress newNodeEui64)
        {
            _newNodeEui64 = newNodeEui64;
        }
        
        /// <summary>
        /// The status to set as <see cref="EmberDeviceUpdate"/> </summary>
        public void SetStatus(EmberDeviceUpdate status)
        {
            _status = status;
        }
        
        /// <summary>
        /// The policyDecision to set as <see cref="EmberJoinDecision"/> </summary>
        public void SetPolicyDecision(EmberJoinDecision policyDecision)
        {
            _policyDecision = policyDecision;
        }
        
        /// <summary>
        /// The parentOfNewNodeId to set as <see cref="EmberNodeId"/> </summary>
        public void SetParentOfNewNodeId(int parentOfNewNodeId)
        {
            _parentOfNewNodeId = parentOfNewNodeId;
        }
        
        /// <summary>
        ///  The Node Id of the node whose status changed.
        /// Return the newNodeId as <see cref="System.Int32"/>
        /// </summary>
        public int GetNewNodeId()
        {
            return _newNodeId;
        }
        
        /// <summary>
        ///  The EUI64 of the node whose status changed.
        /// Return the newNodeEui64 as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetNewNodeEui64()
        {
            return _newNodeEui64;
        }
        
        /// <summary>
        ///  The status of the node: Secure Join/Rejoin, Unsecure Join/Rejoin, Device left.
        /// Return the status as <see cref="EmberDeviceUpdate"/>
        /// </summary>
        public EmberDeviceUpdate GetStatus()
        {
            return _status;
        }
        
        /// <summary>
        ///  An EmberJoinDecision reflecting the decision made.
        /// Return the policyDecision as <see cref="EmberJoinDecision"/>
        /// </summary>
        public EmberJoinDecision GetPolicyDecision()
        {
            return _policyDecision;
        }
        
        /// <summary>
        ///  The parent of the node whose status has changed.
        /// Return the parentOfNewNodeId as <see cref="System.Int32"/>
        /// </summary>
        public int GetParentOfNewNodeId()
        {
            return _parentOfNewNodeId;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspTrustCenterJoinHandler [newNodeId=");
            builder.Append(string.Format("0x{0:X04}", _newNodeId));
            builder.Append(", newNodeEui64=");
            builder.Append(_newNodeEui64);
            builder.Append(", status=");
            builder.Append(_status);
            builder.Append(", policyDecision=");
            builder.Append(_policyDecision);
            builder.Append(", parentOfNewNodeId=");
            builder.Append(string.Format("0x{0:X04}", _parentOfNewNodeId));
            builder.Append(']');
            return builder.ToString();
        }
    }
}
