//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " aesMmoHash ".
    /// This routine processes the passed chunk of data and updates the hash context based on it. If
    /// the 'finalize' parameter is not set, then the length of the data passed in must be a multiple of
    /// 16. If the 'finalize' parameter is set then the length can be any value up 1-16, and the final
    /// hash value will be calculated.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspAesMmoHashRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 111;
        
        /// <summary>
        ///  The hash context to update.
        /// </summary>
        private EmberAesMmoHashContext _context;
        
        /// <summary>
        ///  This indicates whether the final hash value should be calculated.
        /// </summary>
        private bool _finalize;
        
        /// <summary>
        ///  The length of the data to hash.
        /// </summary>
        private int _length;
        
        /// <summary>
        ///  The data to hash.
        /// </summary>
        private int[] _data;
        
        private EzspSerializer _serializer;
        
        public EzspAesMmoHashRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The context to set as <see cref="EmberAesMmoHashContext"/> </summary>
        public void SetContext(EmberAesMmoHashContext context)
        {
            _context = context;
        }
        
        /// <summary>
        /// The finalize to set as <see cref="bool"/> </summary>
        public void SetFinalize(bool finalize)
        {
            _finalize = finalize;
        }
        
        /// <summary>
        /// The length to set as <see cref="uint8_t"/> </summary>
        public void SetLength(int length)
        {
            _length = length;
        }
        
        /// <summary>
        /// The data to set as <see cref="uint8_t[]"/> </summary>
        public void SetData(int[] data)
        {
            _data = data;
        }
        
        /// <summary>
        ///  The hash context to update.
        /// Return the context as <see cref="EmberAesMmoHashContext"/>
        /// </summary>
        public EmberAesMmoHashContext GetContext()
        {
            return _context;
        }
        
        /// <summary>
        ///  This indicates whether the final hash value should be calculated.
        /// Return the finalize as <see cref="System.Boolean"/>
        /// </summary>
        public bool GetFinalize()
        {
            return _finalize;
        }
        
        /// <summary>
        ///  The length of the data to hash.
        /// Return the length as <see cref="System.Int32"/>
        /// </summary>
        public int GetLength()
        {
            return _length;
        }
        
        /// <summary>
        ///  The data to hash.
        /// Return the data as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetData()
        {
            return _data;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeEmberAesMmoHashContext(_context);
            _serializer.SerializeBool(_finalize);
            _serializer.SerializeUInt8(_length);
            _serializer.SerializeUInt8Array(_data);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspAesMmoHashRequest [context=");
            builder.Append(_context);
            builder.Append(", finalize=");
            builder.Append(_finalize);
            builder.Append(", length=");
            builder.Append(_length);
            builder.Append(", data=");
            if (_data == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _data.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X02}", _data[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
