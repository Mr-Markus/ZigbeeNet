//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " addTransientLinkKey ".
    /// This is a function to add a temporary link key for a joining device. The key will get timed out
    /// after a defined timeout period if the device does not update its link key with the Trust
    /// Center.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspAddTransientLinkKeyRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 175;
        
        /// <summary>
        ///  This is the IEEE address of the partner that the device successfully established a key with.
        /// This value is all zeros on a failure.
        /// </summary>
        private IeeeAddress _partner;
        
        /// <summary>
        ///  The transient key data for the joining device.
        /// </summary>
        private EmberKeyData _transientKey;
        
        private EzspSerializer _serializer;
        
        public EzspAddTransientLinkKeyRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The partner to set as <see cref="EmberEUI64"/> </summary>
        public void SetPartner(IeeeAddress partner)
        {
            _partner = partner;
        }
        
        /// <summary>
        /// The transientKey to set as <see cref="EmberKeyData"/> </summary>
        public void SetTransientKey(EmberKeyData transientKey)
        {
            _transientKey = transientKey;
        }
        
        /// <summary>
        ///  This is the IEEE address of the partner that the device successfully established a key with.
        /// This value is all zeros on a failure.
        /// Return the partner as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetPartner()
        {
            return _partner;
        }
        
        /// <summary>
        ///  The transient key data for the joining device.
        /// Return the transientKey as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetTransientKey()
        {
            return _transientKey;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeEmberEui64(_partner);
            _serializer.SerializeEmberKeyData(_transientKey);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspAddTransientLinkKeyRequest [partner=");
            builder.Append(_partner);
            builder.Append(", transientKey=");
            builder.Append(_transientKey);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
