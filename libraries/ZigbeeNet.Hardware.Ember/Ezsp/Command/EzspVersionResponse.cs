//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " version ".
    /// The command allows the Host to specify the desired EZSP version and must be sent before any
    /// other command. This document describes EZSP version 4 and stack type 2 (mesh). The response
    /// provides information about the firmware running on the NCP.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspVersionResponse : EzspFrameResponse
    {
        
        public const int FRAME_ID = 0;
        
        /// <summary>
        ///  The EZSP version the NCP is using
        /// </summary>
        private int _protocolVersion;
        
        /// <summary>
        ///  The type of stack running on the NCP
        /// </summary>
        private int _stackType;
        
        /// <summary>
        ///  The version number of the stack
        /// </summary>
        private int _stackVersion;
        
        public EzspVersionResponse(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _protocolVersion = deserializer.DeserializeUInt8();
            _stackType = deserializer.DeserializeUInt8();
            _stackVersion = deserializer.DeserializeUInt16();
        }
        
        /// <summary>
        /// The protocolVersion to set as <see cref="uint8_t"/> </summary>
        public void SetProtocolVersion(int protocolVersion)
        {
            _protocolVersion = protocolVersion;
        }
        
        /// <summary>
        /// The stackType to set as <see cref="uint8_t"/> </summary>
        public void SetStackType(int stackType)
        {
            _stackType = stackType;
        }
        
        /// <summary>
        /// The stackVersion to set as <see cref="uint16_t"/> </summary>
        public void SetStackVersion(int stackVersion)
        {
            _stackVersion = stackVersion;
        }
        
        /// <summary>
        ///  The EZSP version the NCP is using
        /// Return the protocolVersion as <see cref="System.Int32"/>
        /// </summary>
        public int GetProtocolVersion()
        {
            return _protocolVersion;
        }
        
        /// <summary>
        ///  The type of stack running on the NCP
        /// Return the stackType as <see cref="System.Int32"/>
        /// </summary>
        public int GetStackType()
        {
            return _stackType;
        }
        
        /// <summary>
        ///  The version number of the stack
        /// Return the stackVersion as <see cref="System.Int32"/>
        /// </summary>
        public int GetStackVersion()
        {
            return _stackVersion;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspVersionResponse [protocolVersion=");
            builder.Append(_protocolVersion);
            builder.Append(", stackType=");
            builder.Append(_stackType);
            builder.Append(", stackVersion=");
            builder.Append(string.Format("0x{0:X04}", _stackVersion));
            builder.Append(']');
            return builder.ToString();
        }
    }
}
