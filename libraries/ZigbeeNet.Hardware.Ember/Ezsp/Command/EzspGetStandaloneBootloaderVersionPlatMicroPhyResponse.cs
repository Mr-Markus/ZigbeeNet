//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " getStandaloneBootloaderVersionPlatMicroPhy ".
    /// Detects if the standalone bootloader is installed, and if so returns the installed version.
    /// If not return 0xffff. A returned version of 0x1234 would indicate version 1.2 build 34. Also
    /// return the node's version of PLAT, MICRO and PHY.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspGetStandaloneBootloaderVersionPlatMicroPhyResponse : EzspFrameResponse
    {
        
        public const int FRAME_ID = 145;
        
        /// <summary>
        ///  BOOTLOADER_INVALID_VERSION if the standalone bootloader is not present, or the version of
        /// the installed standalone bootloader.
        /// </summary>
        private int _bootloaderVersion;
        
        /// <summary>
        ///  The value of PLAT on the node.
        /// </summary>
        private int _nodePlat;
        
        /// <summary>
        ///  The value of MICRO on the node.
        /// </summary>
        private int _nodeMicro;
        
        /// <summary>
        ///  The value of PHY on the node.
        /// </summary>
        private int _nodePhy;
        
        public EzspGetStandaloneBootloaderVersionPlatMicroPhyResponse(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _bootloaderVersion = deserializer.DeserializeUInt16();
            _nodePlat = deserializer.DeserializeUInt8();
            _nodeMicro = deserializer.DeserializeUInt8();
            _nodePhy = deserializer.DeserializeUInt8();
        }
        
        /// <summary>
        /// The bootloaderVersion to set as <see cref="uint16_t"/> </summary>
        public void SetBootloaderVersion(int bootloaderVersion)
        {
            _bootloaderVersion = bootloaderVersion;
        }
        
        /// <summary>
        /// The nodePlat to set as <see cref="uint8_t"/> </summary>
        public void SetNodePlat(int nodePlat)
        {
            _nodePlat = nodePlat;
        }
        
        /// <summary>
        /// The nodeMicro to set as <see cref="uint8_t"/> </summary>
        public void SetNodeMicro(int nodeMicro)
        {
            _nodeMicro = nodeMicro;
        }
        
        /// <summary>
        /// The nodePhy to set as <see cref="uint8_t"/> </summary>
        public void SetNodePhy(int nodePhy)
        {
            _nodePhy = nodePhy;
        }
        
        /// <summary>
        ///  BOOTLOADER_INVALID_VERSION if the standalone bootloader is not present, or the version of
        /// the installed standalone bootloader.
        /// Return the bootloaderVersion as <see cref="System.Int32"/>
        /// </summary>
        public int GetBootloaderVersion()
        {
            return _bootloaderVersion;
        }
        
        /// <summary>
        ///  The value of PLAT on the node.
        /// Return the nodePlat as <see cref="System.Int32"/>
        /// </summary>
        public int GetNodePlat()
        {
            return _nodePlat;
        }
        
        /// <summary>
        ///  The value of MICRO on the node.
        /// Return the nodeMicro as <see cref="System.Int32"/>
        /// </summary>
        public int GetNodeMicro()
        {
            return _nodeMicro;
        }
        
        /// <summary>
        ///  The value of PHY on the node.
        /// Return the nodePhy as <see cref="System.Int32"/>
        /// </summary>
        public int GetNodePhy()
        {
            return _nodePhy;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspGetStandaloneBootloaderVersionPlatMicroPhyResponse [bootloaderVersion=");
            builder.Append(string.Format("0x{0:X04}", _bootloaderVersion));
            builder.Append(", nodePlat=");
            builder.Append(_nodePlat);
            builder.Append(", nodeMicro=");
            builder.Append(_nodeMicro);
            builder.Append(", nodePhy=");
            builder.Append(_nodePhy);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
