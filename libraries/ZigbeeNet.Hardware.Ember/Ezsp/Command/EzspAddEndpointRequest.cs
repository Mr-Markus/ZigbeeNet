//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " addEndpoint ".
    /// Configures endpoint information on the NCP. The NCP does not remember these settings after a
    /// reset. Endpoints can be added by the Host after the NCP has reset. Once the status of the stack
    /// changes to EMBER_NETWORK_UP, endpoints can no longer be added and this command will respond
    /// with EZSP_ERROR_INVALID_CALL.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspAddEndpointRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 2;
        
        /// <summary>
        ///  The application endpoint to be added.
        /// </summary>
        private int _endpoint;
        
        /// <summary>
        ///  The endpoint's application profile.
        /// </summary>
        private int _profileId;
        
        /// <summary>
        ///  The endpoint's device ID within the application profile.
        /// </summary>
        private int _deviceId;
        
        /// <summary>
        ///  The device version and flags indicating description availability.
        /// </summary>
        private int _appFlags;
        
        /// <summary>
        ///  Input cluster IDs the endpoint will accept.
        /// </summary>
        private int[] _inputClusterList;
        
        /// <summary>
        ///  Output cluster IDs the endpoint may send.
        /// </summary>
        private int[] _outputClusterList;
        
        private EzspSerializer _serializer;
        
        public EzspAddEndpointRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The endpoint to set as <see cref="uint8_t"/> </summary>
        public void SetEndpoint(int endpoint)
        {
            _endpoint = endpoint;
        }
        
        /// <summary>
        /// The profileId to set as <see cref="uint16_t"/> </summary>
        public void SetProfileId(int profileId)
        {
            _profileId = profileId;
        }
        
        /// <summary>
        /// The deviceId to set as <see cref="uint16_t"/> </summary>
        public void SetDeviceId(int deviceId)
        {
            _deviceId = deviceId;
        }
        
        /// <summary>
        /// The appFlags to set as <see cref="uint8_t"/> </summary>
        public void SetAppFlags(int appFlags)
        {
            _appFlags = appFlags;
        }
        
        /// <summary>
        /// The inputClusterList to set as <see cref="uint16_t[]"/> </summary>
        public void SetInputClusterList(int[] inputClusterList)
        {
            _inputClusterList = inputClusterList;
        }
        
        /// <summary>
        /// The outputClusterList to set as <see cref="uint16_t[]"/> </summary>
        public void SetOutputClusterList(int[] outputClusterList)
        {
            _outputClusterList = outputClusterList;
        }
        
        /// <summary>
        ///  The application endpoint to be added.
        /// Return the endpoint as <see cref="System.Int32"/>
        /// </summary>
        public int GetEndpoint()
        {
            return _endpoint;
        }
        
        /// <summary>
        ///  The endpoint's application profile.
        /// Return the profileId as <see cref="System.Int32"/>
        /// </summary>
        public int GetProfileId()
        {
            return _profileId;
        }
        
        /// <summary>
        ///  The endpoint's device ID within the application profile.
        /// Return the deviceId as <see cref="System.Int32"/>
        /// </summary>
        public int GetDeviceId()
        {
            return _deviceId;
        }
        
        /// <summary>
        ///  The device version and flags indicating description availability.
        /// Return the appFlags as <see cref="System.Int32"/>
        /// </summary>
        public int GetAppFlags()
        {
            return _appFlags;
        }
        
        /// <summary>
        ///  Input cluster IDs the endpoint will accept.
        /// Return the inputClusterList as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetInputClusterList()
        {
            return _inputClusterList;
        }
        
        /// <summary>
        ///  Output cluster IDs the endpoint may send.
        /// Return the outputClusterList as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetOutputClusterList()
        {
            return _outputClusterList;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeUInt8(_endpoint);
            _serializer.SerializeUInt16(_profileId);
            _serializer.SerializeUInt16(_deviceId);
            _serializer.SerializeUInt8(_appFlags);
            _serializer.SerializeUInt8(_inputClusterList.Length);
            _serializer.SerializeUInt8(_outputClusterList.Length);
            _serializer.SerializeUInt16Array(_inputClusterList);
            _serializer.SerializeUInt16Array(_outputClusterList);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspAddEndpointRequest [endpoint=");
            builder.Append(_endpoint);
            builder.Append(", profileId=");
            builder.Append(string.Format("0x{0:X04}", _profileId));
            builder.Append(", deviceId=");
            builder.Append(string.Format("0x{0:X04}", _deviceId));
            builder.Append(", appFlags=");
            builder.Append(_appFlags);
            builder.Append(", inputClusterList=");
            if (_inputClusterList == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _inputClusterList.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X04}", _inputClusterList[cnt]));
                }
            }
            builder.Append(", outputClusterList=");
            if (_outputClusterList == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _outputClusterList.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X04}", _outputClusterList[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
