//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " sendMulticast ".
    /// Sends a multicast message to all endpoints that share a specific multicast ID and are within a
    /// specified number of hops of the sender.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspSendMulticastRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 56;
        
        /// <summary>
        ///  The APS frame for the message. The multicast will be sent to the groupId in this frame.
        /// </summary>
        private EmberApsFrame _apsFrame;
        
        /// <summary>
        ///  The message will be delivered to all nodes within this number of hops of the sender. A value of
        /// zero is converted to EMBER_MAX_HOPS.
        /// </summary>
        private int _hops;
        
        /// <summary>
        ///  The number of hops that the message will be forwarded by devices that are not members of the
        /// group. A value of 7 or greater is treated as infinite.
        /// </summary>
        private int _nonmemberRadius;
        
        /// <summary>
        ///  A value chosen by the Host. This value is used in the ezspMessageSentHandler response to
        /// refer to this message.
        /// </summary>
        private int _messageTag;
        
        /// <summary>
        ///  The multicast message.
        /// </summary>
        private int[] _messageContents;
        
        private EzspSerializer _serializer;
        
        public EzspSendMulticastRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The apsFrame to set as <see cref="EmberApsFrame"/> </summary>
        public void SetApsFrame(EmberApsFrame apsFrame)
        {
            _apsFrame = apsFrame;
        }
        
        /// <summary>
        /// The hops to set as <see cref="uint8_t"/> </summary>
        public void SetHops(int hops)
        {
            _hops = hops;
        }
        
        /// <summary>
        /// The nonmemberRadius to set as <see cref="uint8_t"/> </summary>
        public void SetNonmemberRadius(int nonmemberRadius)
        {
            _nonmemberRadius = nonmemberRadius;
        }
        
        /// <summary>
        /// The messageTag to set as <see cref="uint8_t"/> </summary>
        public void SetMessageTag(int messageTag)
        {
            _messageTag = messageTag;
        }
        
        /// <summary>
        /// The messageContents to set as <see cref="uint8_t[]"/> </summary>
        public void SetMessageContents(int[] messageContents)
        {
            _messageContents = messageContents;
        }
        
        /// <summary>
        ///  The APS frame for the message. The multicast will be sent to the groupId in this frame.
        /// Return the apsFrame as <see cref="EmberApsFrame"/>
        /// </summary>
        public EmberApsFrame GetApsFrame()
        {
            return _apsFrame;
        }
        
        /// <summary>
        ///  The message will be delivered to all nodes within this number of hops of the sender. A value of
        /// zero is converted to EMBER_MAX_HOPS.
        /// Return the hops as <see cref="System.Int32"/>
        /// </summary>
        public int GetHops()
        {
            return _hops;
        }
        
        /// <summary>
        ///  The number of hops that the message will be forwarded by devices that are not members of the
        /// group. A value of 7 or greater is treated as infinite.
        /// Return the nonmemberRadius as <see cref="System.Int32"/>
        /// </summary>
        public int GetNonmemberRadius()
        {
            return _nonmemberRadius;
        }
        
        /// <summary>
        ///  A value chosen by the Host. This value is used in the ezspMessageSentHandler response to
        /// refer to this message.
        /// Return the messageTag as <see cref="System.Int32"/>
        /// </summary>
        public int GetMessageTag()
        {
            return _messageTag;
        }
        
        /// <summary>
        ///  The multicast message.
        /// Return the messageContents as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetMessageContents()
        {
            return _messageContents;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeEmberApsFrame(_apsFrame);
            _serializer.SerializeUInt8(_hops);
            _serializer.SerializeUInt8(_nonmemberRadius);
            _serializer.SerializeUInt8(_messageTag);
            _serializer.SerializeUInt8(_messageContents.Length);
            _serializer.SerializeUInt8Array(_messageContents);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspSendMulticastRequest [apsFrame=");
            builder.Append(_apsFrame);
            builder.Append(", hops=");
            builder.Append(_hops);
            builder.Append(", nonmemberRadius=");
            builder.Append(_nonmemberRadius);
            builder.Append(", messageTag=");
            builder.Append(string.Format("0x{0:X02}", _messageTag));
            builder.Append(", messageContents=");
            if (_messageContents == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _messageContents.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X02}", _messageContents[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
