//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " setPreinstalledCbkeData ".
    /// Sets the device's CA public key, local certificate, and static private key on the NCP
    /// associated with this node.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspSetPreinstalledCbkeDataRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 162;
        
        /// <summary>
        ///  The Certificate Authority's public key.
        /// </summary>
        private EmberPublicKeyData _caCert;
        
        /// <summary>
        ///  The node's new certificate signed by the CA.
        /// </summary>
        private EmberCertificateData _myCert;
        
        /// <summary>
        ///  The node's new static private key.
        /// </summary>
        private EmberPrivateKeyData _myKey;
        
        private EzspSerializer _serializer;
        
        public EzspSetPreinstalledCbkeDataRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The caCert to set as <see cref="EmberPublicKeyData"/> </summary>
        public void SetCaCert(EmberPublicKeyData caCert)
        {
            _caCert = caCert;
        }
        
        /// <summary>
        /// The myCert to set as <see cref="EmberCertificateData"/> </summary>
        public void SetMyCert(EmberCertificateData myCert)
        {
            _myCert = myCert;
        }
        
        /// <summary>
        /// The myKey to set as <see cref="EmberPrivateKeyData"/> </summary>
        public void SetMyKey(EmberPrivateKeyData myKey)
        {
            _myKey = myKey;
        }
        
        /// <summary>
        ///  The Certificate Authority's public key.
        /// Return the caCert as <see cref="EmberPublicKeyData"/>
        /// </summary>
        public EmberPublicKeyData GetCaCert()
        {
            return _caCert;
        }
        
        /// <summary>
        ///  The node's new certificate signed by the CA.
        /// Return the myCert as <see cref="EmberCertificateData"/>
        /// </summary>
        public EmberCertificateData GetMyCert()
        {
            return _myCert;
        }
        
        /// <summary>
        ///  The node's new static private key.
        /// Return the myKey as <see cref="EmberPrivateKeyData"/>
        /// </summary>
        public EmberPrivateKeyData GetMyKey()
        {
            return _myKey;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeEmberPublicKeyData(_caCert);
            _serializer.SerializeEmberCertificateData(_myCert);
            _serializer.SerializeEmberPrivateKeyData(_myKey);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspSetPreinstalledCbkeDataRequest [caCert=");
            builder.Append(_caCert);
            builder.Append(", myCert=");
            builder.Append(_myCert);
            builder.Append(", myKey=");
            builder.Append(_myKey);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
