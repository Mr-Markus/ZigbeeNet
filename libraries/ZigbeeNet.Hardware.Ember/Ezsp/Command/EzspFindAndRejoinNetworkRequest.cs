//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " findAndRejoinNetwork ".
    /// The application may call this function when contact with the network has been lost. The most
    /// common usage case is when an end device can no longer communicate with its parent and wishes to
    /// find a new one. Another case is when a device has missed a Network Key update and no longer has
    /// the current Network Key. The stack will call ezspStackStatusHandler to indicate that the
    /// network is down, then try to re-establish contact with the network by performing an active
    /// scan, choosing a network with matching extended pan id, and sending a ZigBee network rejoin
    /// request. A sec- ond call to the ezspStackStatusHandler callback indicates either the
    /// success or the failure of the attempt. The process takes approximately 150 milliseconds per
    /// channel to complete. This call replaces the emberMobileNodeHasMoved API from EmberZNet
    /// 2.x, which used MAC association and consequently took half a second longer to complete.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspFindAndRejoinNetworkRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 33;
        
        /// <summary>
        ///  This parameter tells the stack whether to try to use the current network key. If it has the
        /// current network key it will perform a secure rejoin (encrypted). If this fails the device
        /// should try an unsecure rejoin. If the Trust Center allows the rejoin then the current Network
        /// Key will be sent encrypted using the device's Link Key. The unsecured rejoin is only
        /// supported in the Commercial Security Library.
        /// </summary>
        private bool _haveCurrentNetworkKey;
        
        /// <summary>
        ///  A mask indicating the channels to be scanned. See emberStartScan for format details. A value
        /// of 0 is reinterpreted as the mask for the current channel.
        /// </summary>
        private int _channelMask;
        
        private EzspSerializer _serializer;
        
        public EzspFindAndRejoinNetworkRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The haveCurrentNetworkKey to set as <see cref="bool"/> </summary>
        public void SetHaveCurrentNetworkKey(bool haveCurrentNetworkKey)
        {
            _haveCurrentNetworkKey = haveCurrentNetworkKey;
        }
        
        /// <summary>
        /// The channelMask to set as <see cref="uint32_t"/> </summary>
        public void SetChannelMask(int channelMask)
        {
            _channelMask = channelMask;
        }
        
        /// <summary>
        ///  This parameter tells the stack whether to try to use the current network key. If it has the
        /// current network key it will perform a secure rejoin (encrypted). If this fails the device
        /// should try an unsecure rejoin. If the Trust Center allows the rejoin then the current Network
        /// Key will be sent encrypted using the device's Link Key. The unsecured rejoin is only
        /// supported in the Commercial Security Library.
        /// Return the haveCurrentNetworkKey as <see cref="System.Boolean"/>
        /// </summary>
        public bool GetHaveCurrentNetworkKey()
        {
            return _haveCurrentNetworkKey;
        }
        
        /// <summary>
        ///  A mask indicating the channels to be scanned. See emberStartScan for format details. A value
        /// of 0 is reinterpreted as the mask for the current channel.
        /// Return the channelMask as <see cref="System.Int32"/>
        /// </summary>
        public int GetChannelMask()
        {
            return _channelMask;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeBool(_haveCurrentNetworkKey);
            _serializer.SerializeUInt32(_channelMask);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspFindAndRejoinNetworkRequest [haveCurrentNetworkKey=");
            builder.Append(_haveCurrentNetworkKey);
            builder.Append(", channelMask=");
            builder.Append(string.Format("0x{0:X08}", _channelMask));
            builder.Append(']');
            return builder.ToString();
        }
    }
}
