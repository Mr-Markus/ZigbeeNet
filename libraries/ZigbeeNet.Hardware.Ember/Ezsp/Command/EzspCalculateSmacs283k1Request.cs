//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " calculateSmacs283k1 ".
    /// Calculates the SMAC verification keys for both the initiator and responder roles of CBKE for
    /// the 283k1 ECC curve using the passed parameters and the stored public/private key pair
    /// previously generated with ezspGenerateKeysRetrieveCert283k1(). It also stores the
    /// unverified link key data in temporary storage on the NCP until the key establishment is
    /// complete.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspCalculateSmacs283k1Request : EzspFrameRequest
    {
        
        public const int FRAME_ID = 234;
        
        /// <summary>
        ///  The role of this device in the Key Establishment protocol.
        /// </summary>
        private bool _amInitiator;
        
        /// <summary>
        ///  The key establishment partner's implicit certificate.
        /// </summary>
        private EmberCertificate283k1Data _partnerCertificate;
        
        /// <summary>
        ///  The key establishment partner's ephemeral public key
        /// </summary>
        private EmberPublicKey283k1Data _partnerEphemeralPublicKey;
        
        private EzspSerializer _serializer;
        
        public EzspCalculateSmacs283k1Request()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The amInitiator to set as <see cref="bool"/> </summary>
        public void SetAmInitiator(bool amInitiator)
        {
            _amInitiator = amInitiator;
        }
        
        /// <summary>
        /// The partnerCertificate to set as <see cref="EmberCertificate283k1Data"/> </summary>
        public void SetPartnerCertificate(EmberCertificate283k1Data partnerCertificate)
        {
            _partnerCertificate = partnerCertificate;
        }
        
        /// <summary>
        /// The partnerEphemeralPublicKey to set as <see cref="EmberPublicKey283k1Data"/> </summary>
        public void SetPartnerEphemeralPublicKey(EmberPublicKey283k1Data partnerEphemeralPublicKey)
        {
            _partnerEphemeralPublicKey = partnerEphemeralPublicKey;
        }
        
        /// <summary>
        ///  The role of this device in the Key Establishment protocol.
        /// Return the amInitiator as <see cref="System.Boolean"/>
        /// </summary>
        public bool GetAmInitiator()
        {
            return _amInitiator;
        }
        
        /// <summary>
        ///  The key establishment partner's implicit certificate.
        /// Return the partnerCertificate as <see cref="EmberCertificate283k1Data"/>
        /// </summary>
        public EmberCertificate283k1Data GetPartnerCertificate()
        {
            return _partnerCertificate;
        }
        
        /// <summary>
        ///  The key establishment partner's ephemeral public key
        /// Return the partnerEphemeralPublicKey as <see cref="EmberPublicKey283k1Data"/>
        /// </summary>
        public EmberPublicKey283k1Data GetPartnerEphemeralPublicKey()
        {
            return _partnerEphemeralPublicKey;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeBool(_amInitiator);
            _serializer.SerializeEmberCertificate283k1Data(_partnerCertificate);
            _serializer.SerializeEmberPublicKey283k1Data(_partnerEphemeralPublicKey);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspCalculateSmacs283k1Request [amInitiator=");
            builder.Append(_amInitiator);
            builder.Append(", partnerCertificate=");
            builder.Append(_partnerCertificate);
            builder.Append(", partnerEphemeralPublicKey=");
            builder.Append(_partnerEphemeralPublicKey);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
