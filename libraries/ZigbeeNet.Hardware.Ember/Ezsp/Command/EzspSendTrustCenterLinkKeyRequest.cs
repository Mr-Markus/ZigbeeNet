//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " sendTrustCenterLinkKey ".
    /// This function sends an APS TransportKey command containing the current trust center link
    /// key. The node to which the command is sent is specified via the short and long address
    /// arguments.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspSendTrustCenterLinkKeyRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 103;
        
        /// <summary>
        ///  The short address of the node to which this command will be sent
        /// </summary>
        private int _destinationNodeId;
        
        /// <summary>
        ///  The long address of the node to which this command will be sent
        /// </summary>
        private IeeeAddress _destinationEui64;
        
        private EzspSerializer _serializer;
        
        public EzspSendTrustCenterLinkKeyRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The destinationNodeId to set as <see cref="EmberNodeId"/> </summary>
        public void SetDestinationNodeId(int destinationNodeId)
        {
            _destinationNodeId = destinationNodeId;
        }
        
        /// <summary>
        /// The destinationEui64 to set as <see cref="EmberEUI64"/> </summary>
        public void SetDestinationEui64(IeeeAddress destinationEui64)
        {
            _destinationEui64 = destinationEui64;
        }
        
        /// <summary>
        ///  The short address of the node to which this command will be sent
        /// Return the destinationNodeId as <see cref="System.Int32"/>
        /// </summary>
        public int GetDestinationNodeId()
        {
            return _destinationNodeId;
        }
        
        /// <summary>
        ///  The long address of the node to which this command will be sent
        /// Return the destinationEui64 as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetDestinationEui64()
        {
            return _destinationEui64;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeUInt16(_destinationNodeId);
            _serializer.SerializeEmberEui64(_destinationEui64);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspSendTrustCenterLinkKeyRequest [destinationNodeId=");
            builder.Append(string.Format("0x{0:X04}", _destinationNodeId));
            builder.Append(", destinationEui64=");
            builder.Append(_destinationEui64);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
