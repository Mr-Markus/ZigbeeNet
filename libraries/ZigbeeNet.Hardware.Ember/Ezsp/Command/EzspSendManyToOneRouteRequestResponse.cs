//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " sendManyToOneRouteRequest ".
    /// Sends a route request packet that creates routes from every node in the network back to this
    /// node. This function should be called by an application that wishes to communicate with many
    /// nodes, for example, a gateway, central monitor, or controller. A device using this function
    /// was referred to as an 'aggregator' in EmberZNet 2.x and earlier, and is referred to as a
    /// 'concentrator' in the ZigBee specification and EmberZNet 3. This function enables large
    /// scale networks, because the other devices do not have to individually perform
    /// bandwidth-intensive route discoveries. Instead, when a remote node sends an APS unicast to
    /// a concentrator, its network layer automatically delivers a special route record packet
    /// first, which lists the network ids of all the intermediate relays. The concentrator can then
    /// use source routing to send outbound APS unicasts. (A source routed message is one in which the
    /// entire route is listed in the network layer header.) This allows the concentrator to
    /// communicate with thousands of devices without requiring large route tables on neighboring
    /// nodes. This function is only available in ZigBee Pro (stack profile 2), and cannot be called
    /// on end devices. Any router can be a concentrator (not just the coordinator), and there can be
    /// multiple concentrators on a network. Note that a concentrator does not automatically
    /// obtain routes to all network nodes after calling this function. Remote applications must
    /// first initiate an inbound APS unicast. Many-to-one routes are not repaired automatically.
    /// Instead, the concentrator application must call this function to rediscover the routes as
    /// necessary, for example, upon failure of a retried APS message. The reason for this is that
    /// there is no scalable one-size-fits-all route repair strategy. A common and recommended
    /// strategy is for the concentrator application to refresh the routes by calling this function
    /// periodically.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspSendManyToOneRouteRequestResponse : EzspFrameResponse
    {
        
        public const int FRAME_ID = 65;
        
        /// <summary>
        ///  EMBER_SUCCESS if the route request was successfully submitted to the transmit queue, and
        /// EMBER_ERR_FATAL otherwise.
        /// </summary>
        private EmberStatus _status;
        
        public EzspSendManyToOneRouteRequestResponse(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _status = deserializer.DeserializeEmberStatus();
        }
        
        /// <summary>
        /// The status to set as <see cref="EmberStatus"/> </summary>
        public void SetStatus(EmberStatus status)
        {
            _status = status;
        }
        
        /// <summary>
        ///  EMBER_SUCCESS if the route request was successfully submitted to the transmit queue, and
        /// EMBER_ERR_FATAL otherwise.
        /// Return the status as <see cref="EmberStatus"/>
        /// </summary>
        public EmberStatus GetStatus()
        {
            return _status;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspSendManyToOneRouteRequestResponse [status=");
            builder.Append(_status);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
