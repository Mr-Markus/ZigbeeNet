//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " messageSentHandler ".
    /// A callback indicating the stack has completed sending a message.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspMessageSentHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 63;
        
        /// <summary>
        ///  The type of message sent.
        /// </summary>
        private EmberOutgoingMessageType _type;
        
        /// <summary>
        ///  The destination to which the message was sent, for direct unicasts, or the address table or
        /// binding index for other unicasts. The value is unspecified for multicasts and broadcasts.
        /// </summary>
        private int _indexOrDestination;
        
        /// <summary>
        ///  The APS frame for the message.
        /// </summary>
        private EmberApsFrame _apsFrame;
        
        /// <summary>
        ///  The value supplied by the Host in the ezspSendUnicast, ezspSendBroadcast or
        /// ezspSendMulticast command.
        /// </summary>
        private int _messageTag;
        
        /// <summary>
        ///  An EmberStatus value of EMBER_SUCCESS if an ACK was received from the destination or
        /// EMBER_DELIVERY_FAILED if no ACK was received.
        /// </summary>
        private EmberStatus _status;
        
        /// <summary>
        ///  The unicast message supplied by the Host. The message contents are only included here if the
        /// decision for the messageContentsInCallback policy is
        /// messageTagAndContentsInCallback.
        /// </summary>
        private int[] _messageContents;
        
        public EzspMessageSentHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _type = deserializer.DeserializeEmberOutgoingMessageType();
            _indexOrDestination = deserializer.DeserializeUInt16();
            _apsFrame = deserializer.DeserializeEmberApsFrame();
            _messageTag = deserializer.DeserializeUInt8();
            _status = deserializer.DeserializeEmberStatus();
            int messageLength = deserializer.DeserializeUInt8();
            _messageContents = deserializer.DeserializeUInt8Array(messageLength);
        }
        
        /// <summary>
        /// The type to set as <see cref="EmberOutgoingMessageType"/> </summary>
        public void SetType(EmberOutgoingMessageType type)
        {
            _type = type;
        }
        
        /// <summary>
        /// The indexOrDestination to set as <see cref="uint16_t"/> </summary>
        public void SetIndexOrDestination(int indexOrDestination)
        {
            _indexOrDestination = indexOrDestination;
        }
        
        /// <summary>
        /// The apsFrame to set as <see cref="EmberApsFrame"/> </summary>
        public void SetApsFrame(EmberApsFrame apsFrame)
        {
            _apsFrame = apsFrame;
        }
        
        /// <summary>
        /// The messageTag to set as <see cref="uint8_t"/> </summary>
        public void SetMessageTag(int messageTag)
        {
            _messageTag = messageTag;
        }
        
        /// <summary>
        /// The status to set as <see cref="EmberStatus"/> </summary>
        public void SetStatus(EmberStatus status)
        {
            _status = status;
        }
        
        /// <summary>
        /// The messageContents to set as <see cref="uint8_t[]"/> </summary>
        public void SetMessageContents(int[] messageContents)
        {
            _messageContents = messageContents;
        }
        
        /// <summary>
        ///  The type of message sent.
        /// Return the type as <see cref="EmberOutgoingMessageType"/>
        /// </summary>
        public EmberOutgoingMessageType GetType2()
        {
            return _type;
        }
        
        /// <summary>
        ///  The destination to which the message was sent, for direct unicasts, or the address table or
        /// binding index for other unicasts. The value is unspecified for multicasts and broadcasts.
        /// Return the indexOrDestination as <see cref="System.Int32"/>
        /// </summary>
        public int GetIndexOrDestination()
        {
            return _indexOrDestination;
        }
        
        /// <summary>
        ///  The APS frame for the message.
        /// Return the apsFrame as <see cref="EmberApsFrame"/>
        /// </summary>
        public EmberApsFrame GetApsFrame()
        {
            return _apsFrame;
        }
        
        /// <summary>
        ///  The value supplied by the Host in the ezspSendUnicast, ezspSendBroadcast or
        /// ezspSendMulticast command.
        /// Return the messageTag as <see cref="System.Int32"/>
        /// </summary>
        public int GetMessageTag()
        {
            return _messageTag;
        }
        
        /// <summary>
        ///  An EmberStatus value of EMBER_SUCCESS if an ACK was received from the destination or
        /// EMBER_DELIVERY_FAILED if no ACK was received.
        /// Return the status as <see cref="EmberStatus"/>
        /// </summary>
        public EmberStatus GetStatus()
        {
            return _status;
        }
        
        /// <summary>
        ///  The unicast message supplied by the Host. The message contents are only included here if the
        /// decision for the messageContentsInCallback policy is
        /// messageTagAndContentsInCallback.
        /// Return the messageContents as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetMessageContents()
        {
            return _messageContents;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspMessageSentHandler [type=");
            builder.Append(_type);
            builder.Append(", indexOrDestination=");
            builder.Append(_indexOrDestination);
            builder.Append(", apsFrame=");
            builder.Append(_apsFrame);
            builder.Append(", messageTag=");
            builder.Append(string.Format("0x{0:X02}", _messageTag));
            builder.Append(", status=");
            builder.Append(_status);
            builder.Append(", messageContents=");
            if (_messageContents == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _messageContents.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X02}", _messageContents[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
