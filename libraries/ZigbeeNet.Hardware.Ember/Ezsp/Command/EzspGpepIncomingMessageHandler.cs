//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " gpepIncomingMessageHandler ".
    /// A callback invoked by the ZigBee GP stack when a GPDF is received.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspGpepIncomingMessageHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 197;
        
        /// <summary>
        ///  An EmberStatus value indicating success or the reason for failure.
        /// </summary>
        private EmberStatus _status;
        
        /// <summary>
        ///  The gpdLink value of the received GPDF.
        /// </summary>
        private int _gpdLink;
        
        /// <summary>
        ///  The GPDF sequence number.
        /// </summary>
        private int _gpdfSequenceNumber;
        
        /// <summary>
        ///  The address of the source GPD.
        /// </summary>
        private EmberGpAddress _addr;
        
        /// <summary>
        ///  The security level of the received GPDF.
        /// </summary>
        private EmberGpSecurityLevel _gpdfSecurityLevel;
        
        /// <summary>
        ///  The securityKeyType used to decrypt/authenticate the incoming GPDF.
        /// </summary>
        private EmberGpKeyType _gpdfSecurityKeyType;
        
        /// <summary>
        ///  Whether the incoming GPDF had the auto-commissioning bit set.
        /// </summary>
        private bool _autoCommissioning;
        
        /// <summary>
        ///  Whether the incoming GPDF had the rxAfterTx bit set.
        /// </summary>
        private bool _rxAfterTx;
        
        /// <summary>
        ///  The security frame counter of the incoming GDPF.
        /// </summary>
        private int _gpdSecurityFrameCounterLength;
        
        /// <summary>
        ///  The gpdCommandId of the incoming GPDF.
        /// </summary>
        private int _gpdCommandId;
        
        /// <summary>
        ///  The received MIC of the GPDF.
        /// </summary>
        private int _mic;
        
        /// <summary>
        ///  The proxy table index of the corresponding proxy table entry to the incoming GPDF.
        /// </summary>
        private int _proxyTableIndex;
        
        /// <summary>
        ///  The GPD command payload.
        /// </summary>
        private int[] _gpdCommandPayload;
        
        public EzspGpepIncomingMessageHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _status = deserializer.DeserializeEmberStatus();
            _gpdLink = deserializer.DeserializeUInt8();
            _gpdfSequenceNumber = deserializer.DeserializeUInt8();
            _addr = deserializer.DeserializeEmberGpAddress();
            _gpdfSecurityLevel = deserializer.DeserializeEmberGpSecurityLevel();
            _gpdfSecurityKeyType = deserializer.DeserializeEmberGpKeyType();
            _autoCommissioning = deserializer.DeserializeBool();
            _rxAfterTx = deserializer.DeserializeBool();
            _gpdSecurityFrameCounterLength = deserializer.DeserializeUInt32();
            _gpdCommandId = deserializer.DeserializeUInt8();
            _mic = deserializer.DeserializeUInt32();
            _proxyTableIndex = deserializer.DeserializeUInt8();
            int gpdCommandPayloadLength = deserializer.DeserializeUInt8();
            _gpdCommandPayload = deserializer.DeserializeUInt8Array(gpdCommandPayloadLength);
        }
        
        /// <summary>
        /// The status to set as <see cref="EmberStatus"/> </summary>
        public void SetStatus(EmberStatus status)
        {
            _status = status;
        }
        
        /// <summary>
        /// The gpdLink to set as <see cref="uint8_t"/> </summary>
        public void SetGpdLink(int gpdLink)
        {
            _gpdLink = gpdLink;
        }
        
        /// <summary>
        /// The gpdfSequenceNumber to set as <see cref="uint8_t"/> </summary>
        public void SetGpdfSequenceNumber(int gpdfSequenceNumber)
        {
            _gpdfSequenceNumber = gpdfSequenceNumber;
        }
        
        /// <summary>
        /// The addr to set as <see cref="EmberGpAddress"/> </summary>
        public void SetAddr(EmberGpAddress addr)
        {
            _addr = addr;
        }
        
        /// <summary>
        /// The gpdfSecurityLevel to set as <see cref="EmberGpSecurityLevel"/> </summary>
        public void SetGpdfSecurityLevel(EmberGpSecurityLevel gpdfSecurityLevel)
        {
            _gpdfSecurityLevel = gpdfSecurityLevel;
        }
        
        /// <summary>
        /// The gpdfSecurityKeyType to set as <see cref="EmberGpKeyType"/> </summary>
        public void SetGpdfSecurityKeyType(EmberGpKeyType gpdfSecurityKeyType)
        {
            _gpdfSecurityKeyType = gpdfSecurityKeyType;
        }
        
        /// <summary>
        /// The autoCommissioning to set as <see cref="bool"/> </summary>
        public void SetAutoCommissioning(bool autoCommissioning)
        {
            _autoCommissioning = autoCommissioning;
        }
        
        /// <summary>
        /// The rxAfterTx to set as <see cref="bool"/> </summary>
        public void SetRxAfterTx(bool rxAfterTx)
        {
            _rxAfterTx = rxAfterTx;
        }
        
        /// <summary>
        /// The gpdSecurityFrameCounterLength to set as <see cref="uint32_t"/> </summary>
        public void SetGpdSecurityFrameCounterLength(int gpdSecurityFrameCounterLength)
        {
            _gpdSecurityFrameCounterLength = gpdSecurityFrameCounterLength;
        }
        
        /// <summary>
        /// The gpdCommandId to set as <see cref="uint8_t"/> </summary>
        public void SetGpdCommandId(int gpdCommandId)
        {
            _gpdCommandId = gpdCommandId;
        }
        
        /// <summary>
        /// The mic to set as <see cref="uint32_t"/> </summary>
        public void SetMic(int mic)
        {
            _mic = mic;
        }
        
        /// <summary>
        /// The proxyTableIndex to set as <see cref="uint8_t"/> </summary>
        public void SetProxyTableIndex(int proxyTableIndex)
        {
            _proxyTableIndex = proxyTableIndex;
        }
        
        /// <summary>
        /// The gpdCommandPayload to set as <see cref="uint8_t[]"/> </summary>
        public void SetGpdCommandPayload(int[] gpdCommandPayload)
        {
            _gpdCommandPayload = gpdCommandPayload;
        }
        
        /// <summary>
        ///  An EmberStatus value indicating success or the reason for failure.
        /// Return the status as <see cref="EmberStatus"/>
        /// </summary>
        public EmberStatus GetStatus()
        {
            return _status;
        }
        
        /// <summary>
        ///  The gpdLink value of the received GPDF.
        /// Return the gpdLink as <see cref="System.Int32"/>
        /// </summary>
        public int GetGpdLink()
        {
            return _gpdLink;
        }
        
        /// <summary>
        ///  The GPDF sequence number.
        /// Return the gpdfSequenceNumber as <see cref="System.Int32"/>
        /// </summary>
        public int GetGpdfSequenceNumber()
        {
            return _gpdfSequenceNumber;
        }
        
        /// <summary>
        ///  The address of the source GPD.
        /// Return the addr as <see cref="EmberGpAddress"/>
        /// </summary>
        public EmberGpAddress GetAddr()
        {
            return _addr;
        }
        
        /// <summary>
        ///  The security level of the received GPDF.
        /// Return the gpdfSecurityLevel as <see cref="EmberGpSecurityLevel"/>
        /// </summary>
        public EmberGpSecurityLevel GetGpdfSecurityLevel()
        {
            return _gpdfSecurityLevel;
        }
        
        /// <summary>
        ///  The securityKeyType used to decrypt/authenticate the incoming GPDF.
        /// Return the gpdfSecurityKeyType as <see cref="EmberGpKeyType"/>
        /// </summary>
        public EmberGpKeyType GetGpdfSecurityKeyType()
        {
            return _gpdfSecurityKeyType;
        }
        
        /// <summary>
        ///  Whether the incoming GPDF had the auto-commissioning bit set.
        /// Return the autoCommissioning as <see cref="System.Boolean"/>
        /// </summary>
        public bool GetAutoCommissioning()
        {
            return _autoCommissioning;
        }
        
        /// <summary>
        ///  Whether the incoming GPDF had the rxAfterTx bit set.
        /// Return the rxAfterTx as <see cref="System.Boolean"/>
        /// </summary>
        public bool GetRxAfterTx()
        {
            return _rxAfterTx;
        }
        
        /// <summary>
        ///  The security frame counter of the incoming GDPF.
        /// Return the gpdSecurityFrameCounterLength as <see cref="System.Int32"/>
        /// </summary>
        public int GetGpdSecurityFrameCounterLength()
        {
            return _gpdSecurityFrameCounterLength;
        }
        
        /// <summary>
        ///  The gpdCommandId of the incoming GPDF.
        /// Return the gpdCommandId as <see cref="System.Int32"/>
        /// </summary>
        public int GetGpdCommandId()
        {
            return _gpdCommandId;
        }
        
        /// <summary>
        ///  The received MIC of the GPDF.
        /// Return the mic as <see cref="System.Int32"/>
        /// </summary>
        public int GetMic()
        {
            return _mic;
        }
        
        /// <summary>
        ///  The proxy table index of the corresponding proxy table entry to the incoming GPDF.
        /// Return the proxyTableIndex as <see cref="System.Int32"/>
        /// </summary>
        public int GetProxyTableIndex()
        {
            return _proxyTableIndex;
        }
        
        /// <summary>
        ///  The GPD command payload.
        /// Return the gpdCommandPayload as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetGpdCommandPayload()
        {
            return _gpdCommandPayload;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspGpepIncomingMessageHandler [status=");
            builder.Append(_status);
            builder.Append(", gpdLink=");
            builder.Append(_gpdLink);
            builder.Append(", gpdfSequenceNumber=");
            builder.Append(_gpdfSequenceNumber);
            builder.Append(", addr=");
            builder.Append(_addr);
            builder.Append(", gpdfSecurityLevel=");
            builder.Append(_gpdfSecurityLevel);
            builder.Append(", gpdfSecurityKeyType=");
            builder.Append(_gpdfSecurityKeyType);
            builder.Append(", autoCommissioning=");
            builder.Append(_autoCommissioning);
            builder.Append(", rxAfterTx=");
            builder.Append(_rxAfterTx);
            builder.Append(", gpdSecurityFrameCounterLength=");
            builder.Append(_gpdSecurityFrameCounterLength);
            builder.Append(", gpdCommandId=");
            builder.Append(_gpdCommandId);
            builder.Append(", mic=");
            builder.Append(_mic);
            builder.Append(", proxyTableIndex=");
            builder.Append(_proxyTableIndex);
            builder.Append(", gpdCommandPayload=");
            if (_gpdCommandPayload == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _gpdCommandPayload.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X02}", _gpdCommandPayload[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
