//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " gpProxyTableProcessGpPairing ".
    /// Update the GP Proxy table based on a GP pairing.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspGpProxyTableProcessGpPairingRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 201;
        
        /// <summary>
        ///  The options field of the GP Pairing command.
        /// </summary>
        private int _options;
        
        /// <summary>
        ///  The target GPD.
        /// </summary>
        private EmberGpAddress _addr;
        
        /// <summary>
        ///  The communication mode of the GP Sink.
        /// </summary>
        private int _commMode;
        
        /// <summary>
        ///  The network address of the GP Sink.
        /// </summary>
        private int _sinkNetworkAddress;
        
        /// <summary>
        ///  The group ID of the GP Sink.
        /// </summary>
        private int _sinkGroupId;
        
        /// <summary>
        ///  The alias assigned to the GPD.
        /// </summary>
        private int _assignedAlias;
        
        /// <summary>
        ///  The IEEE address of the GP Sink.
        /// </summary>
        private IeeeAddress _sinkIeeeAddress;
        
        /// <summary>
        ///  The key to use for the target GPD.
        /// </summary>
        private EmberKeyData _gpdKey;
        
        private EzspSerializer _serializer;
        
        public EzspGpProxyTableProcessGpPairingRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The options to set as <see cref="uint32_t"/> </summary>
        public void SetOptions(int options)
        {
            _options = options;
        }
        
        /// <summary>
        /// The addr to set as <see cref="EmberGpAddress"/> </summary>
        public void SetAddr(EmberGpAddress addr)
        {
            _addr = addr;
        }
        
        /// <summary>
        /// The commMode to set as <see cref="uint8_t"/> </summary>
        public void SetCommMode(int commMode)
        {
            _commMode = commMode;
        }
        
        /// <summary>
        /// The sinkNetworkAddress to set as <see cref="uint16_t"/> </summary>
        public void SetSinkNetworkAddress(int sinkNetworkAddress)
        {
            _sinkNetworkAddress = sinkNetworkAddress;
        }
        
        /// <summary>
        /// The sinkGroupId to set as <see cref="uint16_t"/> </summary>
        public void SetSinkGroupId(int sinkGroupId)
        {
            _sinkGroupId = sinkGroupId;
        }
        
        /// <summary>
        /// The assignedAlias to set as <see cref="uint16_t"/> </summary>
        public void SetAssignedAlias(int assignedAlias)
        {
            _assignedAlias = assignedAlias;
        }
        
        /// <summary>
        /// The sinkIeeeAddress to set as <see cref="EmberEUI64"/> </summary>
        public void SetSinkIeeeAddress(IeeeAddress sinkIeeeAddress)
        {
            _sinkIeeeAddress = sinkIeeeAddress;
        }
        
        /// <summary>
        /// The gpdKey to set as <see cref="EmberKeyData"/> </summary>
        public void SetGpdKey(EmberKeyData gpdKey)
        {
            _gpdKey = gpdKey;
        }
        
        /// <summary>
        ///  The options field of the GP Pairing command.
        /// Return the options as <see cref="System.Int32"/>
        /// </summary>
        public int GetOptions()
        {
            return _options;
        }
        
        /// <summary>
        ///  The target GPD.
        /// Return the addr as <see cref="EmberGpAddress"/>
        /// </summary>
        public EmberGpAddress GetAddr()
        {
            return _addr;
        }
        
        /// <summary>
        ///  The communication mode of the GP Sink.
        /// Return the commMode as <see cref="System.Int32"/>
        /// </summary>
        public int GetCommMode()
        {
            return _commMode;
        }
        
        /// <summary>
        ///  The network address of the GP Sink.
        /// Return the sinkNetworkAddress as <see cref="System.Int32"/>
        /// </summary>
        public int GetSinkNetworkAddress()
        {
            return _sinkNetworkAddress;
        }
        
        /// <summary>
        ///  The group ID of the GP Sink.
        /// Return the sinkGroupId as <see cref="System.Int32"/>
        /// </summary>
        public int GetSinkGroupId()
        {
            return _sinkGroupId;
        }
        
        /// <summary>
        ///  The alias assigned to the GPD.
        /// Return the assignedAlias as <see cref="System.Int32"/>
        /// </summary>
        public int GetAssignedAlias()
        {
            return _assignedAlias;
        }
        
        /// <summary>
        ///  The IEEE address of the GP Sink.
        /// Return the sinkIeeeAddress as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetSinkIeeeAddress()
        {
            return _sinkIeeeAddress;
        }
        
        /// <summary>
        ///  The key to use for the target GPD.
        /// Return the gpdKey as <see cref="EmberKeyData"/>
        /// </summary>
        public EmberKeyData GetGpdKey()
        {
            return _gpdKey;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeUInt32(_options);
            _serializer.SerializeEmberGpAddress(_addr);
            _serializer.SerializeUInt8(_commMode);
            _serializer.SerializeUInt16(_sinkNetworkAddress);
            _serializer.SerializeUInt16(_sinkGroupId);
            _serializer.SerializeUInt16(_assignedAlias);
            _serializer.SerializeEmberEui64(_sinkIeeeAddress);
            _serializer.SerializeEmberKeyData(_gpdKey);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspGpProxyTableProcessGpPairingRequest [options=");
            builder.Append(_options);
            builder.Append(", addr=");
            builder.Append(_addr);
            builder.Append(", commMode=");
            builder.Append(_commMode);
            builder.Append(", sinkNetworkAddress=");
            builder.Append(string.Format("0x{0:X04}", _sinkNetworkAddress));
            builder.Append(", sinkGroupId=");
            builder.Append(string.Format("0x{0:X04}", _sinkGroupId));
            builder.Append(", assignedAlias=");
            builder.Append(string.Format("0x{0:X04}", _assignedAlias));
            builder.Append(", sinkIeeeAddress=");
            builder.Append(_sinkIeeeAddress);
            builder.Append(", gpdKey=");
            builder.Append(_gpdKey);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
