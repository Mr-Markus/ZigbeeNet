//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " getParentChildParameters ".
    /// Returns information about the children of the local node and the parent of the local node.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspGetParentChildParametersResponse : EzspFrameResponse
    {
        
        public const int FRAME_ID = 41;
        
        /// <summary>
        ///  The number of children the node currently has.
        /// </summary>
        private int _childCount;
        
        /// <summary>
        ///  The parent's EUI64. The value is undefined for nodes without parents (coordinators and
        /// nodes that are not joined to a network)
        /// </summary>
        private IeeeAddress _parentEui64;
        
        /// <summary>
        ///  The parent's node ID. The value is undefined for nodes without parents (coordinators and
        /// nodes that are not joined to a network).
        /// </summary>
        private int _parentNodeId;
        
        public EzspGetParentChildParametersResponse(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _childCount = deserializer.DeserializeUInt8();
            _parentEui64 = deserializer.DeserializeEmberEui64();
            _parentNodeId = deserializer.DeserializeUInt16();
        }
        
        /// <summary>
        /// The childCount to set as <see cref="uint8_t"/> </summary>
        public void SetChildCount(int childCount)
        {
            _childCount = childCount;
        }
        
        /// <summary>
        /// The parentEui64 to set as <see cref="EmberEUI64"/> </summary>
        public void SetParentEui64(IeeeAddress parentEui64)
        {
            _parentEui64 = parentEui64;
        }
        
        /// <summary>
        /// The parentNodeId to set as <see cref="EmberNodeId"/> </summary>
        public void SetParentNodeId(int parentNodeId)
        {
            _parentNodeId = parentNodeId;
        }
        
        /// <summary>
        ///  The number of children the node currently has.
        /// Return the childCount as <see cref="System.Int32"/>
        /// </summary>
        public int GetChildCount()
        {
            return _childCount;
        }
        
        /// <summary>
        ///  The parent's EUI64. The value is undefined for nodes without parents (coordinators and
        /// nodes that are not joined to a network)
        /// Return the parentEui64 as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetParentEui64()
        {
            return _parentEui64;
        }
        
        /// <summary>
        ///  The parent's node ID. The value is undefined for nodes without parents (coordinators and
        /// nodes that are not joined to a network).
        /// Return the parentNodeId as <see cref="System.Int32"/>
        /// </summary>
        public int GetParentNodeId()
        {
            return _parentNodeId;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspGetParentChildParametersResponse [childCount=");
            builder.Append(_childCount);
            builder.Append(", parentEui64=");
            builder.Append(_parentEui64);
            builder.Append(", parentNodeId=");
            builder.Append(string.Format("0x{0:X04}", _parentNodeId));
            builder.Append(']');
            return builder.ToString();
        }
    }
}
