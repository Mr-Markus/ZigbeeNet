//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " macFilterMatchMessageHandler ".
    /// A callback invoked by the EmberZNet stack when a raw MAC message that has matched one of the
    /// application's configured MAC filters.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspMacFilterMatchMessageHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 70;
        
        /// <summary>
        ///  The index of the filter that was matched.
        /// </summary>
        private int _filterIndexMatch;
        
        /// <summary>
        ///  The type of MAC passthrough message received.
        /// </summary>
        private EmberMacPassthroughType _legacyPassthroughType;
        
        /// <summary>
        ///  The link quality from the node that last relayed the message.
        /// </summary>
        private int _lastHopLqi;
        
        /// <summary>
        ///  The energy level (in units of dBm) observed during reception.
        /// </summary>
        private int _lastHopRssi;
        
        /// <summary>
        ///  The raw message that was received.
        /// </summary>
        private int[] _messageContents;
        
        public EzspMacFilterMatchMessageHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _filterIndexMatch = deserializer.DeserializeUInt8();
            _legacyPassthroughType = deserializer.DeserializeEmberMacPassthroughType();
            _lastHopLqi = deserializer.DeserializeUInt8();
            _lastHopRssi = deserializer.DeserializeInt8S();
            int messageLength = deserializer.DeserializeUInt8();
            _messageContents = deserializer.DeserializeUInt8Array(messageLength);
        }
        
        /// <summary>
        /// The filterIndexMatch to set as <see cref="uint8_t"/> </summary>
        public void SetFilterIndexMatch(int filterIndexMatch)
        {
            _filterIndexMatch = filterIndexMatch;
        }
        
        /// <summary>
        /// The legacyPassthroughType to set as <see cref="EmberMacPassthroughType"/> </summary>
        public void SetLegacyPassthroughType(EmberMacPassthroughType legacyPassthroughType)
        {
            _legacyPassthroughType = legacyPassthroughType;
        }
        
        /// <summary>
        /// The lastHopLqi to set as <see cref="uint8_t"/> </summary>
        public void SetLastHopLqi(int lastHopLqi)
        {
            _lastHopLqi = lastHopLqi;
        }
        
        /// <summary>
        /// The lastHopRssi to set as <see cref="int8s"/> </summary>
        public void SetLastHopRssi(int lastHopRssi)
        {
            _lastHopRssi = lastHopRssi;
        }
        
        /// <summary>
        /// The messageContents to set as <see cref="uint8_t[]"/> </summary>
        public void SetMessageContents(int[] messageContents)
        {
            _messageContents = messageContents;
        }
        
        /// <summary>
        ///  The index of the filter that was matched.
        /// Return the filterIndexMatch as <see cref="System.Int32"/>
        /// </summary>
        public int GetFilterIndexMatch()
        {
            return _filterIndexMatch;
        }
        
        /// <summary>
        ///  The type of MAC passthrough message received.
        /// Return the legacyPassthroughType as <see cref="EmberMacPassthroughType"/>
        /// </summary>
        public EmberMacPassthroughType GetLegacyPassthroughType()
        {
            return _legacyPassthroughType;
        }
        
        /// <summary>
        ///  The link quality from the node that last relayed the message.
        /// Return the lastHopLqi as <see cref="System.Int32"/>
        /// </summary>
        public int GetLastHopLqi()
        {
            return _lastHopLqi;
        }
        
        /// <summary>
        ///  The energy level (in units of dBm) observed during reception.
        /// Return the lastHopRssi as <see cref="System.Int32"/>
        /// </summary>
        public int GetLastHopRssi()
        {
            return _lastHopRssi;
        }
        
        /// <summary>
        ///  The raw message that was received.
        /// Return the messageContents as <see cref="System.Int32"/>
        /// </summary>
        public int[] GetMessageContents()
        {
            return _messageContents;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspMacFilterMatchMessageHandler [filterIndexMatch=");
            builder.Append(_filterIndexMatch);
            builder.Append(", legacyPassthroughType=");
            builder.Append(_legacyPassthroughType);
            builder.Append(", lastHopLqi=");
            builder.Append(_lastHopLqi);
            builder.Append(", lastHopRssi=");
            builder.Append(_lastHopRssi);
            builder.Append(", messageContents=");
            if (_messageContents == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _messageContents.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X02}", _messageContents[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
