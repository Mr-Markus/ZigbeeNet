//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " zigbeeKeyEstablishmentHandler ".
    /// This is a callback that indicates the success or failure of an attempt to establish a key with a
    /// partner device.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspZigbeeKeyEstablishmentHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 155;
        
        /// <summary>
        ///  This is the IEEE address of the partner that the device successfully established a key with.
        /// This value is all zeros on a failure.
        /// </summary>
        private IeeeAddress _partner;
        
        /// <summary>
        ///  This is the status indicating what was established or why the key establishment failed.
        /// </summary>
        private EmberStatus _status;
        
        public EzspZigbeeKeyEstablishmentHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _partner = deserializer.DeserializeEmberEui64();
            _status = deserializer.DeserializeEmberStatus();
        }
        
        /// <summary>
        /// The partner to set as <see cref="EmberEUI64"/> </summary>
        public void SetPartner(IeeeAddress partner)
        {
            _partner = partner;
        }
        
        /// <summary>
        /// The status to set as <see cref="EmberStatus"/> </summary>
        public void SetStatus(EmberStatus status)
        {
            _status = status;
        }
        
        /// <summary>
        ///  This is the IEEE address of the partner that the device successfully established a key with.
        /// This value is all zeros on a failure.
        /// Return the partner as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetPartner()
        {
            return _partner;
        }
        
        /// <summary>
        ///  This is the status indicating what was established or why the key establishment failed.
        /// Return the status as <see cref="EmberStatus"/>
        /// </summary>
        public EmberStatus GetStatus()
        {
            return _status;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspZigbeeKeyEstablishmentHandler [partner=");
            builder.Append(_partner);
            builder.Append(", status=");
            builder.Append(_status);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
