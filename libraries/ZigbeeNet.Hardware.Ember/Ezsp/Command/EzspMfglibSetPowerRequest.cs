//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " mfglibSetPower ".
    /// First select the transmit power mode, and then include a method for selecting the radio
    /// transmit power. The valid power settings depend upon the specific radio in use. Ember radios
    /// have discrete power settings, and then requested power is rounded to a valid power setting;
    /// the actual power output is available to the caller via mfglibGetPower().
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspMfglibSetPowerRequest : EzspFrameRequest
    {
        
        public const int FRAME_ID = 140;
        
        /// <summary>
        ///  Power mode.
        /// </summary>
        private EmberPowerMode _txPowerMode;
        
        /// <summary>
        ///  Power in units of dBm. Refer to radio data sheet for valid range.
        /// </summary>
        private int _power;
        
        private EzspSerializer _serializer;
        
        public EzspMfglibSetPowerRequest()
        {
            _frameId = FRAME_ID;
            _serializer = new EzspSerializer();
        }
        
        /// <summary>
        /// The txPowerMode to set as <see cref="EmberPowerMode"/> </summary>
        public void SetTxPowerMode(EmberPowerMode txPowerMode)
        {
            _txPowerMode = txPowerMode;
        }
        
        /// <summary>
        /// The power to set as <see cref="int8s"/> </summary>
        public void SetPower(int power)
        {
            _power = power;
        }
        
        /// <summary>
        ///  Power mode.
        /// Return the txPowerMode as <see cref="EmberPowerMode"/>
        /// </summary>
        public EmberPowerMode GetTxPowerMode()
        {
            return _txPowerMode;
        }
        
        /// <summary>
        ///  Power in units of dBm. Refer to radio data sheet for valid range.
        /// Return the power as <see cref="System.Int32"/>
        /// </summary>
        public int GetPower()
        {
            return _power;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public override int[] Serialize()
        {
            SerializeHeader(_serializer);
            _serializer.SerializeEmberPowerMode(_txPowerMode);
            _serializer.SerializeInt8S(_power);
            return _serializer.GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspMfglibSetPowerRequest [txPowerMode=");
            builder.Append(_txPowerMode);
            builder.Append(", power=");
            builder.Append(_power);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
