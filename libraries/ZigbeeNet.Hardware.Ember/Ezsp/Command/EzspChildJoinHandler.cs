//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Ember.Ezsp.Command
{
    using ZigBeeNet.Hardware.Ember.Internal.Serializer;
    using ZigBeeNet.Hardware.Ember.Ezsp.Structure;
    
    
    /// <summary>
    /// Class to implement the Ember EZSP command " childJoinHandler ".
    /// Indicates that a child has joined or left.
    /// This class provides methods for processing EZSP commands.
    /// </summary>
    public class EzspChildJoinHandler : EzspFrameResponse
    {
        
        public const int FRAME_ID = 35;
        
        /// <summary>
        ///  The index of the child of interest.
        /// </summary>
        private int _index;
        
        /// <summary>
        ///  True if the child is joining. False the child is leaving.
        /// </summary>
        private bool _joining;
        
        /// <summary>
        ///  The node ID of the child.
        /// </summary>
        private int _childId;
        
        /// <summary>
        ///  The EUI64 of the child.
        /// </summary>
        private IeeeAddress _childEui64;
        
        /// <summary>
        ///  The node type of the child.
        /// </summary>
        private EmberNodeType _childType;
        
        public EzspChildJoinHandler(int[] inputBuffer) : 
                base(inputBuffer)
        {
            _index = deserializer.DeserializeUInt8();
            _joining = deserializer.DeserializeBool();
            _childId = deserializer.DeserializeUInt16();
            _childEui64 = deserializer.DeserializeEmberEui64();
            _childType = deserializer.DeserializeEmberNodeType();
        }
        
        /// <summary>
        /// The index to set as <see cref="uint8_t"/> </summary>
        public void SetIndex(int index)
        {
            _index = index;
        }
        
        /// <summary>
        /// The joining to set as <see cref="bool"/> </summary>
        public void SetJoining(bool joining)
        {
            _joining = joining;
        }
        
        /// <summary>
        /// The childId to set as <see cref="EmberNodeId"/> </summary>
        public void SetChildId(int childId)
        {
            _childId = childId;
        }
        
        /// <summary>
        /// The childEui64 to set as <see cref="EmberEUI64"/> </summary>
        public void SetChildEui64(IeeeAddress childEui64)
        {
            _childEui64 = childEui64;
        }
        
        /// <summary>
        /// The childType to set as <see cref="EmberNodeType"/> </summary>
        public void SetChildType(EmberNodeType childType)
        {
            _childType = childType;
        }
        
        /// <summary>
        ///  The index of the child of interest.
        /// Return the index as <see cref="System.Int32"/>
        /// </summary>
        public int GetIndex()
        {
            return _index;
        }
        
        /// <summary>
        ///  True if the child is joining. False the child is leaving.
        /// Return the joining as <see cref="System.Boolean"/>
        /// </summary>
        public bool GetJoining()
        {
            return _joining;
        }
        
        /// <summary>
        ///  The node ID of the child.
        /// Return the childId as <see cref="System.Int32"/>
        /// </summary>
        public int GetChildId()
        {
            return _childId;
        }
        
        /// <summary>
        ///  The EUI64 of the child.
        /// Return the childEui64 as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetChildEui64()
        {
            return _childEui64;
        }
        
        /// <summary>
        ///  The node type of the child.
        /// Return the childType as <see cref="EmberNodeType"/>
        /// </summary>
        public EmberNodeType GetChildType()
        {
            return _childType;
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("EzspChildJoinHandler [index=");
            builder.Append(_index);
            builder.Append(", joining=");
            builder.Append(_joining);
            builder.Append(", childId=");
            builder.Append(string.Format("0x{0:X04}", _childId));
            builder.Append(", childEui64=");
            builder.Append(_childEui64);
            builder.Append(", childType=");
            builder.Append(_childType);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
