using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish CO2 Value Command value object class.
    ///
    /// Cluster: Price. Command ID 0x07 is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishCO2Value command is sent in response to a GetCO2Value command or if a new CO2
    /// conversion factor is available. Clients should be capable of storing at least two
    /// instances of the CO2 conversion factor, the currently active and the next one.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishCo2ValueCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x07;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the Publish command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Start Time command message field.
        /// 
        /// A UTCTime field to denote the time at which the CO2 value becomes valid. A start
        /// date/time of 0x00000000 shall indicate that the command should be executed
        /// immediately. A start date/time of 0xFFFFFFFF shall cause an existing
        /// PublishCO2Value command with the same Provider ID and Issuer Event ID to be
        /// cancelled (note that, in markets where permanently active price information is
        /// required for billing purposes, it is recommended that a replacement/superseding
        /// PublishCO2Value command is used in place of this cancellation mechanism).
        /// </summary>
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Tariff Type command message field.
        /// 
        /// An 8-bit bitmap identifying the type of tariff published in this command. The least
        /// significant nibble represents an enumeration of the tariff type as detailed in
        /// Table D-108 (Generation Meters shall use the ‘Received’ Tariff). The most
        /// significant nibble is reserved.
        /// </summary>
        public byte TariffType { get; set; }

        /// <summary>
        /// CO2 Value command message field.
        /// 
        /// The format and use of this field is the same as for the CO2 attribute or ReceivedCO2
        /// attribute (depending on TariffType) as defined in D.4.2.2.7.9 and D.4.2.2.15.6
        /// respectively. A value of 0xFFFFFFFF indicates field not used. The format and use of
        /// this field is the same as for the CO2Unit attribute or ReceivedCO2Unit attribute
        /// (depending on TariffType) as defined in D.4.2.2.7.10 and D.4.2.2.15.7
        /// respectively. A value of 0xFF indicates field not used. The format and use of this
        /// field is the same as for the CO2TrailingDigit attribute or
        /// ReceivedCO2TrailingDigit attribute (depending on TariffType) as defined in
        /// D.4.2.2.7.11 and D.4.2.2.15.8 respectively. A value of 0xFF indicates field not
        /// used.
        /// </summary>
        public uint Co2Value { get; set; }

        /// <summary>
        /// CO2 Value Unit command message field.
        /// </summary>
        public byte Co2ValueUnit { get; set; }

        /// <summary>
        /// CO2 Value Trailing Digit command message field.
        /// </summary>
        public byte Co2ValueTrailingDigit { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishCo2ValueCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(StartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(TariffType, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(Co2Value, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(Co2ValueUnit, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(Co2ValueTrailingDigit, ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            StartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            TariffType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            Co2Value = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            Co2ValueUnit = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            Co2ValueTrailingDigit = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishCo2ValueCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", StartTime=");
            builder.Append(StartTime);
            builder.Append(", TariffType=");
            builder.Append(TariffType);
            builder.Append(", Co2Value=");
            builder.Append(Co2Value);
            builder.Append(", Co2ValueUnit=");
            builder.Append(Co2ValueUnit);
            builder.Append(", Co2ValueTrailingDigit=");
            builder.Append(Co2ValueTrailingDigit);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
