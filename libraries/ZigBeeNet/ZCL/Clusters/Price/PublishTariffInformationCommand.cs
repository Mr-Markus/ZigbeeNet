using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Tariff Information Command value object class.
    ///
    /// Cluster: Price. Command ID 0x04 is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishTariffInformation command is sent in response to a GetTariffInformation
    /// command or if new tariff information is available (including Price Matrix and Block
    /// Thresholds). Clients should be capable of storing at least two instances of the Tariff
    /// Information, the currently active and the next one. Note that there may be separate
    /// tariff information for consumption delivered and received. <br> Note that the payload
    /// for this command could be up to 61 bytes in length, therefore fragmentation may be
    /// required. <br> If the CLIENT is unable to store this PublishTariffInformation
    /// command, the device should respond using a ZCL Default Response with a status of
    /// INSUFFICIENT_SPACE.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishTariffInformationCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x04;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// A unique identifier for the commodity supplier. The ProviderID in this command
        /// will always be the one stored as the attribute except for the case where a change of
        /// supplier is pending and the new supplier wishes to publish its tariff information
        /// in advance.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the Publish command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Issuer Tariff ID command message field.
        /// 
        /// Unique identifier generated by the commodity supplier.
        /// </summary>
        public uint IssuerTariffId { get; set; }

        /// <summary>
        /// Start Time command message field.
        /// 
        /// A UTCTime field to denote the time at which the price signal becomes valid. A start
        /// date/time of 0x00000000 shall indicate that the command should be executed
        /// immediately. An 8-bit bitmap identifying the type of tariff published in this
        /// command. The least significant nibble represents an enumeration of the tariff
        /// type as detailed in Table D-108 (Generation Meters shall use the ‘Received’
        /// Tariff), the most significant nibble represents an enumeration specifying the
        /// charging scheme
        /// </summary>
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Tariff Type command message field.
        /// </summary>
        public byte TariffType { get; set; }

        /// <summary>
        /// Tariff Label command message field.
        /// 
        /// The format and use of this field is the same as for the TariffLabel attribute or
        /// ReceivedTariffLabel attribute (depending on TariffType). The format and use of
        /// this field is the same as for the NumberofPriceTiersInUse attribute or
        /// ReceivedNumberofPriceTiersInUse attribute (depending on
        /// TariffType/Charging Scheme). The format and use of this field is the same as for the
        /// NumberofBlockThresholdsInUse attribute or
        /// ReceivedNumberofBlockThresholdsInUse attribute (depending on
        /// TariffType/Charging Scheme).
        /// </summary>
        public ByteArray TariffLabel { get; set; }

        /// <summary>
        /// Number Of Price Tiers command message field.
        /// </summary>
        public byte NumberOfPriceTiers { get; set; }

        /// <summary>
        /// Number Of Block Thresholds command message field.
        /// </summary>
        public byte NumberOfBlockThresholds { get; set; }

        /// <summary>
        /// Unit Of Measure command message field.
        /// 
        /// The format and use of this field is the same as for the Unit of Measure attribute.
        /// </summary>
        public byte UnitOfMeasure { get; set; }

        /// <summary>
        /// Currency command message field.
        /// 
        /// The format and use of this field is the same as for the Currency attribute.
        /// </summary>
        public ushort Currency { get; set; }

        /// <summary>
        /// Price Trailing Digit command message field.
        /// 
        /// The format and use of this field is the same as for the PriceTrailingDigit
        /// attribute.
        /// </summary>
        public byte PriceTrailingDigit { get; set; }

        /// <summary>
        /// Standing Charge command message field.
        /// 
        /// The format and use of this field is the same as for the StandingCharge attribute. A
        /// value of 0xFFFFFFFF indicates the field is not used. When publishing Received
        /// tariffs (according to TariffType) this field should be set to 0xFFFFFFFF.
        /// </summary>
        public uint StandingCharge { get; set; }

        /// <summary>
        /// Tier Block Mode command message field.
        /// 
        /// The format and use of this field is the same as for the TierBlockMode attribute or
        /// ReceivedTierBlockMode attribute (depending on TariffType ). In case of TOU or
        /// Block Charging only, this field is not used and shall be set to 0xFF. For combined
        /// Block/TOU charging, this field is mandatory and must be set to a valid value.
        /// </summary>
        public byte TierBlockMode { get; set; }

        /// <summary>
        /// Block Threshold Multiplier command message field.
        /// 
        /// BlockThresholdMultiplier provides a value to be multiplied against Threshold
        /// parameter(s). If present, this attribute must be applied to all Block Threshold
        /// values to derive values that can be compared against the
        /// CurrentBlockPeriodConsumptionDelivered attribute within the Metering
        /// cluster. This parameter must be used in conjunction with the
        /// BlockThresholdDivisor parameter(s). In case no multiplier is defined, this
        /// field shall be set to 1.
        /// </summary>
        public uint BlockThresholdMultiplier { get; set; }

        /// <summary>
        /// Block Threshold Divisor command message field.
        /// 
        /// BlockThresholdDivisor provides a value to divide the result of applying the
        /// ThresholdMultiplier attribute to Block Threshold values to derive values that
        /// can be compared against the CurrentBlockPeriodConsumptionDelivered attribute
        /// within the Metering cluster. This attribute must be used in conjunction with the
        /// BlockThresholdMultiplier parameter(s). In case no divisor is defined, this
        /// field shall be set to 1.
        /// </summary>
        public uint BlockThresholdDivisor { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishTariffInformationCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerTariffId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(StartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(TariffType, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(TariffLabel, ZclDataType.Get(DataType.OCTET_STRING));
            serializer.Serialize(NumberOfPriceTiers, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(NumberOfBlockThresholds, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(UnitOfMeasure, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(Currency, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(PriceTrailingDigit, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(StandingCharge, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(TierBlockMode, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(BlockThresholdMultiplier, ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            serializer.Serialize(BlockThresholdDivisor, ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerTariffId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            StartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            TariffType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            TariffLabel = deserializer.Deserialize<ByteArray>(ZclDataType.Get(DataType.OCTET_STRING));
            NumberOfPriceTiers = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            NumberOfBlockThresholds = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            UnitOfMeasure = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            Currency = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            PriceTrailingDigit = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            StandingCharge = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            TierBlockMode = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            BlockThresholdMultiplier = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            BlockThresholdDivisor = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishTariffInformationCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", IssuerTariffId=");
            builder.Append(IssuerTariffId);
            builder.Append(", StartTime=");
            builder.Append(StartTime);
            builder.Append(", TariffType=");
            builder.Append(TariffType);
            builder.Append(", TariffLabel=");
            builder.Append(TariffLabel);
            builder.Append(", NumberOfPriceTiers=");
            builder.Append(NumberOfPriceTiers);
            builder.Append(", NumberOfBlockThresholds=");
            builder.Append(NumberOfBlockThresholds);
            builder.Append(", UnitOfMeasure=");
            builder.Append(UnitOfMeasure);
            builder.Append(", Currency=");
            builder.Append(Currency);
            builder.Append(", PriceTrailingDigit=");
            builder.Append(PriceTrailingDigit);
            builder.Append(", StandingCharge=");
            builder.Append(StandingCharge);
            builder.Append(", TierBlockMode=");
            builder.Append(TierBlockMode);
            builder.Append(", BlockThresholdMultiplier=");
            builder.Append(BlockThresholdMultiplier);
            builder.Append(", BlockThresholdDivisor=");
            builder.Append(BlockThresholdDivisor);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
