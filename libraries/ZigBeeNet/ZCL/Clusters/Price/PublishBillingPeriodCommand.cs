using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Billing Period Command value object class.
    ///
    /// Cluster: Price. Command ID 0x09 is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishBillingPeriod command is generated in response to receiving a
    /// GetBillingPeriod(s) command or when an update to the Billing schedule is available
    /// from the commodity supplier. Nested and overlapping PublishBillingPeriod commands
    /// are not allowed. In the case of overlapping billing periods, the period with the newer
    /// IssuerEventID takes priority over all nested and overlapping periods. All existing
    /// periods that overlap, even partially, should be removed. Note however that there may be
    /// separate billing schedules for consumption delivered and received.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishBillingPeriodCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x09;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the Publish command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Billing Period Start Time command message field.
        /// 
        /// A UTCTime field to denote the time at which the billing period starts. A start time of
        /// 0x00000000 is a special time denoting “now”. A start date/time of 0xFFFFFFFF shall
        /// cause an existing PublishBillingPeriod command with the same Provider ID and
        /// Issuer Event ID to be cancelled (note that, in markets where permanently active
        /// price information is required for billing purposes, it is recommended that a
        /// replacement/superseding PublishBillingPeriod command is used in place of this
        /// cancellation mechanism).
        /// </summary>
        public DateTime BillingPeriodStartTime { get; set; }

        /// <summary>
        /// Billing Period Duration command message field.
        /// 
        /// An unsigned 24-bit field to denote the billing period duration. The duration units
        /// are defined by the Billing Period Duration Type field. Billing periods are always
        /// repeating, i.e. after BillingPeriodDuration has elapsed since a
        /// BillingPeriodStartTime, a new billing period will start with the same duration.
        /// </summary>
        public uint BillingPeriodDuration { get; set; }

        /// <summary>
        /// Billing Period Duration Type command message field.
        /// 
        /// An 8-bit bitmap where the least significant nibble is an enumerated sub-field
        /// indicating the time base used for the duration, and the most significant nibble is
        /// an enumerated sub-field providing duration control.
        /// </summary>
        public byte BillingPeriodDurationType { get; set; }

        /// <summary>
        /// Tariff Type command message field.
        /// 
        /// An 8-bit bitmap identifying the type of tariff published in this command. The least
        /// significant nibble represents an enumeration of the tariff type (Generation
        /// Meters shall use the ‘Received’ Tariff). The most significant nibble is reserved.
        /// </summary>
        public byte TariffType { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishBillingPeriodCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(BillingPeriodStartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(BillingPeriodDuration, ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            serializer.Serialize(BillingPeriodDurationType, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(TariffType, ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            BillingPeriodStartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            BillingPeriodDuration = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            BillingPeriodDurationType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            TariffType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishBillingPeriodCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", BillingPeriodStartTime=");
            builder.Append(BillingPeriodStartTime);
            builder.Append(", BillingPeriodDuration=");
            builder.Append(BillingPeriodDuration);
            builder.Append(", BillingPeriodDurationType=");
            builder.Append(BillingPeriodDurationType);
            builder.Append(", TariffType=");
            builder.Append(TariffType);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
