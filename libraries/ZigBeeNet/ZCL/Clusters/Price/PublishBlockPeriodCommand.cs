using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Block Period Command value object class.
    ///
    /// Cluster: Price. Command ID 0x01 is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The Publish Block Period command is generated in response to receiving a Get Block
    /// Period(s) command or when an update to the block tariff schedule is available from the
    /// commodity provider. When the Get Block Period(s) command is received over the ZigBee
    /// Smart Energy network, the Publish Block Period command(s) should be sent unicast to the
    /// requestor. In the case of an update to the block tariff schedule from the commodity
    /// provider, the Publish Block Period command should be unicast to all individually
    /// registered devices implementing the Price Cluster on the ZigBee Smart Energy network.
    /// <br> Devices capable of receiving this command must be capable of storing and
    /// supporting two block periods, the current active block and the next block. By
    /// supporting two block periods, receiving devices will allow the Publish Block Period
    /// command generator to publish the next block information during the current block
    /// period.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishBlockPeriodCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x01;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new block period
        /// information is provided that replaces older information for the same period, this
        /// field allows devices to determine which information is newer. It is expected that
        /// the value contained in this field is a unique number managed by upstream servers or a
        /// UTC based time stamp (UTCTime data type) identifying when the Publish Block Period
        /// command was issued. Thus, newer block period information will have a value in the
        /// Issuer Event ID field that is larger than older block information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Block Period Start Time command message field.
        /// 
        /// A UTCTime field to denote the time at which the block tariff period starts. A start
        /// time of 0x00000000 is a special time denoting “now”. If the device would send an
        /// event with a Start Time of now, adjust the Duration In Minutes field to correspond to
        /// the remainder of the event. A start date/time of 0xFFFFFFFF shall cause an existing
        /// PublishBlockPeriod command with the same Provider ID and Issuer Event ID to be
        /// cancelled (note that, in markets where permanently active price information is
        /// required for billing purposes, it is recommended that a replacement/superseding
        /// Publish Block Period command is used in place of this cancellation mechanism).
        /// Where the Duration Timebase is set to a value other than Minutes, the Duration
        /// Control sub field provides further clarification; where Duration Control is set
        /// to Start of Timebase, the Block Period Start Time shall be set to 00:00:00 on the
        /// applicable date, and where Duration Control is set to End of Timebase, the Block
        /// Period Start Time shall be set to 23:59:59 on the applicable date.
        /// </summary>
        public DateTime BlockPeriodStartTime { get; set; }

        /// <summary>
        /// Block Period Duration command message field.
        /// 
        /// An unsigned 24-bit field to denote the block tariff period . The duration units are
        /// defined by the Block Period Duration Type field. Maximum value (0xFFFFFF) means
        /// 'until changed'.
        /// </summary>
        public uint BlockPeriodDuration { get; set; }

        /// <summary>
        /// Block Period Control command message field.
        /// 
        /// Identifies additional control options for the block period event. A value of 0x00
        /// indicates field not used. Indicates whether a Price Acknowledgment command shall
        /// be returned on receipt of this Publish Block Period command. Repeating Block:
        /// Indicates whether a block period repeats on expiry. Note that the interaction
        /// between Block and Billing periods is out of scope of this specification.
        /// </summary>
        public byte BlockPeriodControl { get; set; }

        /// <summary>
        /// Block Period Duration Type command message field.
        /// 
        /// An 8-bit bitmap where the least significant nibble is an enumerated sub-field
        /// indicating the time base used for the duration, and the most significant nibble is
        /// an enumerated sub-field providing duration control
        /// Where the Duration Timebase is set to a value other than Minutes, the Duration
        /// Control sub field provides further clarification; Start of Timebase indicates
        /// that the duration shall run from the START of the respective day, week or month,
        /// whereas End of Timebase shall indicate that the duration runs from the END of the
        /// respective day, week or month. The Duration Control sub-field shall be set to Not
        /// Specified when a timebase of Minutes is in use.
        /// </summary>
        public byte BlockPeriodDurationType { get; set; }

        /// <summary>
        /// Tariff Type command message field.
        /// 
        /// An 8-bit bitmap identifying the type of tariff published in this command. The least
        /// significant nibble represents an enumeration of the tariff type (Generation
        /// Meters shall use the ‘Received’ Tariff). The most significant nibble is reserved.
        /// </summary>
        public byte TariffType { get; set; }

        /// <summary>
        /// Tariff Resolution Period command message field.
        /// 
        /// An 8 bit enumeration identifying the resolution period for the block tariff.
        /// The Tariff Resolution of Block Period means that the Block Tariff is applied based
        /// on calculations to the Block Thresholds defined in the command set without
        /// smoothing. The Tariff resolution period of 1 Day means that the application should
        /// apply “daily resolution”, with recalculation of the thresholds through the Block
        /// Period to achieve the same result for the end of the Block Period but smoothing out
        /// the tariff application for the customer. This is described as follows:
        /// </summary>
        public byte TariffResolutionPeriod { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishBlockPeriodCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(BlockPeriodStartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(BlockPeriodDuration, ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            serializer.Serialize(BlockPeriodControl, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(BlockPeriodDurationType, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(TariffType, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(TariffResolutionPeriod, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            BlockPeriodStartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            BlockPeriodDuration = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            BlockPeriodControl = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            BlockPeriodDurationType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            TariffType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            TariffResolutionPeriod = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishBlockPeriodCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", BlockPeriodStartTime=");
            builder.Append(BlockPeriodStartTime);
            builder.Append(", BlockPeriodDuration=");
            builder.Append(BlockPeriodDuration);
            builder.Append(", BlockPeriodControl=");
            builder.Append(BlockPeriodControl);
            builder.Append(", BlockPeriodDurationType=");
            builder.Append(BlockPeriodDurationType);
            builder.Append(", TariffType=");
            builder.Append(TariffType);
            builder.Append(", TariffResolutionPeriod=");
            builder.Append(TariffResolutionPeriod);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
