using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Price Matrix Command value object class.
    ///
    /// Cluster: Price. Command ID 0x05 is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishPriceMatrix command is used to publish the Block Price Information Set (up
    /// to 15 tiers x 15 blocks) and the Extended Price Information Set (up to 48 tiers). The
    /// PublishPriceMatrix command is sent in response to a GetPriceMatrix command. Clients
    /// should be capable of storing at least two instances of the Price Matrix, the currently
    /// active and the next one. There may be a separate Price Matrix for consumption delivered
    /// and received; in this case, each Price Matrix will be identified by a different
    /// IssuerTariffId value. The Price server shall send only the number of tiers and blocks as
    /// defined in the corresponding PublishTariffInformation command
    /// (NumberofPriceTiersinUse, NumberofBlockThresholdsinUse+1) <br> The maximum
    /// application payload may not be sufficient to transfer all Price Matrix elements in one
    /// command. Therefore the ESI may send as many PublishPriceMatrix commands as needed. In
    /// this case the first command shall have CommandIndex set to 0, the second to 1 and so on; all
    /// associated commands shall use the same value of Issuer Event ID. Note that, in this case,
    /// it is the clientâ€™s responsibility to ensure that it receives all associated
    /// PublishPriceMatrix commands before any of the payloads can be used.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishPriceMatrixCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x05;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the Publish command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Start Time command message field.
        /// 
        /// A UTCTime field to denote the time at which the price signal becomes valid. A start
        /// date/time of 0x00000000 shall indicate that the command should be executed
        /// immediately.
        /// </summary>
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Issuer Tariff ID command message field.
        /// 
        /// Unique identifier generated by the commodity supplier. This must match the Issuer
        /// Tariff ID sent in the related PublishTariffInformation command.
        /// </summary>
        public uint IssuerTariffId { get; set; }

        /// <summary>
        /// Command Index command message field.
        /// 
        /// The Command Index is used to count the payload fragments in the case that an entire
        /// payload does not fit into one message. The Command Index starts at 0 and is
        /// incremented for each fragment belonging to the same command.
        /// </summary>
        public byte CommandIndex { get; set; }

        /// <summary>
        /// Total Number Of Commands command message field.
        /// 
        /// In the case that an entire payload does not fit into one message, the Total Number of
        /// Commands field indicates the total number of sub-commands in the message. An 8-bit
        /// bitmap, the least significant bit of which specifies the information type stored
        /// in the sub payload. The remaining bits are reserved. the commodity provider. This
        /// field allows differentiation in deregulated markets where multiple commodity
        /// providers may be available.
        /// </summary>
        public byte TotalNumberOfCommands { get; set; }

        /// <summary>
        /// Sub Payload Control command message field.
        /// </summary>
        public byte SubPayloadControl { get; set; }

        /// <summary>
        /// Price Matrix Sub Payload command message field.
        /// </summary>
        public PriceMatrixSubPayload PriceMatrixSubPayload { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishPriceMatrixCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(StartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(IssuerTariffId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(CommandIndex, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(TotalNumberOfCommands, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(SubPayloadControl, ZclDataType.Get(DataType.BITMAP_8_BIT));
            PriceMatrixSubPayload.Serialize(serializer);
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            StartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            IssuerTariffId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            CommandIndex = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            TotalNumberOfCommands = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            SubPayloadControl = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            PriceMatrixSubPayload = new PriceMatrixSubPayload();
            PriceMatrixSubPayload.Deserialize(deserializer);
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishPriceMatrixCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", StartTime=");
            builder.Append(StartTime);
            builder.Append(", IssuerTariffId=");
            builder.Append(IssuerTariffId);
            builder.Append(", CommandIndex=");
            builder.Append(CommandIndex);
            builder.Append(", TotalNumberOfCommands=");
            builder.Append(TotalNumberOfCommands);
            builder.Append(", SubPayloadControl=");
            builder.Append(SubPayloadControl);
            builder.Append(", PriceMatrixSubPayload=");
            builder.Append(PriceMatrixSubPayload);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
