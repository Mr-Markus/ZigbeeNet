using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Currency Conversion Command value object class.
    ///
    /// Cluster: Price. Command ID 0x0D is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishCurrencyConversion command is sent in response to a
    /// GetCurrencyConversion command or when a new currency becomes available.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishCurrencyConversionCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0D;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the Publish command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Start Time command message field.
        /// 
        /// A UTCTime field to denote the time at which the new currency becomes valid. A start
        /// date/time of 0x00000000 shall indicate that the command should be executed
        /// immediately. A start date/time of 0xFFFFFFFF shall cause an existing but pending
        /// PublishCurrencyConversion command with the same Provider ID and Issuer Event ID
        /// to be cancelled.
        /// </summary>
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Old Currency command message field.
        /// 
        /// An unsigned 16-bit field containing identifying information concerning the old
        /// local unit of currency used in the Price cluster. The value of the Old Currency field
        /// should match the values defined by ISO 4217.
        /// </summary>
        public ushort OldCurrency { get; set; }

        /// <summary>
        /// New Currency command message field.
        /// 
        /// An unsigned 16-bit field containing identifying information concerning the new
        /// local unit of currency used in the Price cluster. The value of the New Currency field
        /// should match the values defined by ISO 4217.
        /// </summary>
        public ushort NewCurrency { get; set; }

        /// <summary>
        /// Conversion Factor command message field.
        /// 
        /// The format and use of this field is the same as for the ConversionFactor attribute.
        /// </summary>
        public uint ConversionFactor { get; set; }

        /// <summary>
        /// Conversion Factor Trailing Digit command message field.
        /// 
        /// The format and use of this field is the same as for the
        /// ConversionFactorTrailingDigit attribute.
        /// </summary>
        public byte ConversionFactorTrailingDigit { get; set; }

        /// <summary>
        /// Currency Change Control Flags command message field.
        /// 
        /// A 32-bit mask that denotes the functions that are required to be carried out on
        /// processing of this command.
        /// </summary>
        public uint CurrencyChangeControlFlags { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishCurrencyConversionCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(StartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(OldCurrency, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(NewCurrency, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(ConversionFactor, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(ConversionFactorTrailingDigit, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(CurrencyChangeControlFlags, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            StartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            OldCurrency = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            NewCurrency = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            ConversionFactor = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            ConversionFactorTrailingDigit = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            CurrencyChangeControlFlags = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishCurrencyConversionCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", StartTime=");
            builder.Append(StartTime);
            builder.Append(", OldCurrency=");
            builder.Append(OldCurrency);
            builder.Append(", NewCurrency=");
            builder.Append(NewCurrency);
            builder.Append(", ConversionFactor=");
            builder.Append(ConversionFactor);
            builder.Append(", ConversionFactorTrailingDigit=");
            builder.Append(ConversionFactorTrailingDigit);
            builder.Append(", CurrencyChangeControlFlags=");
            builder.Append(CurrencyChangeControlFlags);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
