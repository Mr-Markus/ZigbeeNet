using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Price Acknowledgement Command value object class.
    ///
    /// Cluster: Price. Command ID 0x02 is sent TO the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PriceAcknowledgement command provides the ability to acknowledge a previously
    /// sent PublishPrice command. It is mandatory for 1.1 and later devices. For SE 1.0
    /// devices, the command is optional.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PriceAcknowledgementCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x02;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32 bit field containing a unique identifier for the commodity provider
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider.
        /// </summary>
        public byte IssuerEventId { get; set; }

        /// <summary>
        /// Price Ack Time command message field.
        /// 
        /// Time price acknowledgement generated.
        /// </summary>
        public DateTime PriceAckTime { get; set; }

        /// <summary>
        /// Control command message field.
        /// 
        /// Identifies the Price Control or Block Period Control options for the event.
        /// </summary>
        public byte Control { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PriceAcknowledgementCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.CLIENT_TO_SERVER;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(PriceAckTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(Control, ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            PriceAckTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            Control = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PriceAcknowledgementCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", PriceAckTime=");
            builder.Append(PriceAckTime);
            builder.Append(", Control=");
            builder.Append(Control);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
