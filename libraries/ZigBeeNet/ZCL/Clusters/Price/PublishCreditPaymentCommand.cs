using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Credit Payment Command value object class.
    ///
    /// Cluster: Price. Command ID 0x0C is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishCreditPayment command is used to update the credit payment information
    /// when available. <br> Nested and overlapping PublishCreditPayment commands are not
    /// allowed. In the case of overlapping credit payments, the payment with the newer Issuer
    /// Event ID takes priority over all nested and overlapping payments. All existing
    /// payments that overlap, even partially, should be removed.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishCreditPaymentCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0C;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the Publish command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Credit Payment Due Date command message field.
        /// 
        /// A UTCTime field containing the time that the next credit payment is due.
        /// </summary>
        public DateTime CreditPaymentDueDate { get; set; }

        /// <summary>
        /// Credit Payment Overdue Amount command message field.
        /// 
        /// An unsigned 32-bit field denoting the current amount this is overdue from the
        /// consumer. This field should be provided in the same currency as used in the Price
        /// cluster.
        /// </summary>
        public uint CreditPaymentOverdueAmount { get; set; }

        /// <summary>
        /// Credit Payment Status command message field.
        /// 
        /// An 8-bit enumeration identifying the current credit payment status.
        /// </summary>
        public byte CreditPaymentStatus { get; set; }

        /// <summary>
        /// Credit Payment command message field.
        /// 
        /// An unsigned 32-bit field denoting the last credit payment. This field should be
        /// provided in the same currency as used in the Price cluster.
        /// </summary>
        public uint CreditPayment { get; set; }

        /// <summary>
        /// Credit Payment Date command message field.
        /// 
        /// A UTCTime field containing the time at which the last credit payment was made.
        /// </summary>
        public DateTime CreditPaymentDate { get; set; }

        /// <summary>
        /// Credit Payment Ref command message field.
        /// 
        /// An string of between 0-20 octets used to denote the last credit payment reference
        /// used by the energy supplier.
        /// </summary>
        public ByteArray CreditPaymentRef { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishCreditPaymentCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(CreditPaymentDueDate, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(CreditPaymentOverdueAmount, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(CreditPaymentStatus, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(CreditPayment, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(CreditPaymentDate, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(CreditPaymentRef, ZclDataType.Get(DataType.OCTET_STRING));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            CreditPaymentDueDate = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            CreditPaymentOverdueAmount = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            CreditPaymentStatus = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            CreditPayment = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            CreditPaymentDate = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            CreditPaymentRef = deserializer.Deserialize<ByteArray>(ZclDataType.Get(DataType.OCTET_STRING));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishCreditPaymentCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", CreditPaymentDueDate=");
            builder.Append(CreditPaymentDueDate);
            builder.Append(", CreditPaymentOverdueAmount=");
            builder.Append(CreditPaymentOverdueAmount);
            builder.Append(", CreditPaymentStatus=");
            builder.Append(CreditPaymentStatus);
            builder.Append(", CreditPayment=");
            builder.Append(CreditPayment);
            builder.Append(", CreditPaymentDate=");
            builder.Append(CreditPaymentDate);
            builder.Append(", CreditPaymentRef=");
            builder.Append(CreditPaymentRef);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
