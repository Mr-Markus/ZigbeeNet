using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Tier Labels Command value object class.
    ///
    /// Cluster: Price. Command ID 0x08 is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishTierLabels command is generated in response to receiving a GetTierLabels
    /// command or when there is a tier label change
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishTierLabelsCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x08;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. It is expected that the
        /// value contained in this field is a unique number managed by upstream servers or a UTC
        /// based time stamp (UTCTime data type) identifying when the Publish command was
        /// issued. Thus, newer information will have a value in the Issuer Event ID field that
        /// is larger than older information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Issuer Tariff ID command message field.
        /// 
        /// Unique identifier generated by the commodity supplier. This is used to identify
        /// the tariff that the labels apply to.
        /// </summary>
        public uint IssuerTariffId { get; set; }

        /// <summary>
        /// Command Index command message field.
        /// 
        /// The Command Index is used to count the payload fragments in the case where the entire
        /// payload does not fit into one message. The Command Index starts at 0 and is
        /// incremented for each fragment belonging to the same command.
        /// </summary>
        public byte CommandIndex { get; set; }

        /// <summary>
        /// Total Number Of Commands command message field.
        /// 
        /// In the case where the entire payload does not fit into one message, the Total Number
        /// of Commands field indicates the total number of sub commands in the message.
        /// </summary>
        public byte TotalNumberOfCommands { get; set; }

        /// <summary>
        /// Number Of Labels command message field.
        /// 
        /// The number of Tier ID/Tier Label sets contained within the command.
        /// </summary>
        public byte NumberOfLabels { get; set; }

        /// <summary>
        /// Tier ID command message field.
        /// 
        /// The tier number that the associated Tier Label applies to.
        /// </summary>
        public byte TierId { get; set; }

        /// <summary>
        /// Tier Label command message field.
        /// 
        /// ZCL Octet String field capable of storing a 12 character string (the first
        /// character indicates the string length, represented in hexadecimal format)
        /// encoded in the UTF-8 format.
        /// </summary>
        public ByteArray TierLabel { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishTierLabelsCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerTariffId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(CommandIndex, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(TotalNumberOfCommands, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(NumberOfLabels, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(TierId, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(TierLabel, ZclDataType.Get(DataType.OCTET_STRING));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerTariffId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            CommandIndex = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            TotalNumberOfCommands = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            NumberOfLabels = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            TierId = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            TierLabel = deserializer.Deserialize<ByteArray>(ZclDataType.Get(DataType.OCTET_STRING));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishTierLabelsCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", IssuerTariffId=");
            builder.Append(IssuerTariffId);
            builder.Append(", CommandIndex=");
            builder.Append(CommandIndex);
            builder.Append(", TotalNumberOfCommands=");
            builder.Append(TotalNumberOfCommands);
            builder.Append(", NumberOfLabels=");
            builder.Append(NumberOfLabels);
            builder.Append(", TierId=");
            builder.Append(TierId);
            builder.Append(", TierLabel=");
            builder.Append(TierLabel);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
