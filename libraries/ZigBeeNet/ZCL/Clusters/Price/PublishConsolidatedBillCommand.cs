using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Price;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Price
{
    /// <summary>
    /// Publish Consolidated Bill Command value object class.
    ///
    /// Cluster: Price. Command ID 0x0A is sent FROM the server.
    /// This command is a specific command used for the Price cluster.
    ///
    /// The PublishConsolidatedBill command is used to make consolidated billing
    /// information from previous billing periods available to other end devices. This
    /// command is issued in response to a GetConsolidatedBill command or if new billing
    /// information is available. Nested and overlapping PublishConsolidatedBill commands
    /// are not allowed. In the case of overlapping consolidated bills, the bill with the newer
    /// IssuerEventID takes priority over all nested and overlapping bills. All existing
    /// bills that overlap, even partially, should be removed. <br> Note however that there may
    /// be separate consolidated bills for consumption delivered and received.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class PublishConsolidatedBillCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0700;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0A;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider. This field allows differentiation in deregulated markets where
        /// multiple commodity providers may be available.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the Publish command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Billing Period Start Time command message field.
        /// 
        /// A UTCTime field containing the start time of the related billing period. A start
        /// date/time of 0x00000000 shall indicate that the command should be executed
        /// immediately. A start date/time of 0xFFFFFFFF shall cause an existing
        /// PublishConsolidatedBill command with the same Provider ID and Issuer Event ID to
        /// be cancelled (note that, in markets where permanently active price information is
        /// required for billing purposes, it is recommended that a replacement/superseding
        /// PublishConsolidatedBill command is used in place of this cancellation
        /// mechanism).
        /// </summary>
        public DateTime BillingPeriodStartTime { get; set; }

        /// <summary>
        /// Billing Period Duration command message field.
        /// 
        /// An unsigned 24-bit field denoting the duration of the related billing period. The
        /// duration units are defined by the Billing Period Duration Type field.
        /// </summary>
        public uint BillingPeriodDuration { get; set; }

        /// <summary>
        /// Billing Period Duration Type command message field.
        /// 
        /// An 8-bit bitmap where the least significant nibble is an enumerated sub-field
        /// indicating the time base used for the duration, and the most significant nibble is
        /// an enumerated sub-field providing duration control.
        /// </summary>
        public byte BillingPeriodDurationType { get; set; }

        /// <summary>
        /// Tariff Type command message field.
        /// 
        /// An 8-bit bitmap identifying the type of tariff published in this command. The least
        /// significant nibble represents an enumeration of the tariff type as detailed in
        /// </summary>
        public byte TariffType { get; set; }

        /// <summary>
        /// Consolidated Bill command message field.
        /// 
        /// An unsigned 32-bit field containing the consolidated bill value for the stated
        /// billing period. The Consolidated Bill field should be provided in the same
        /// currency as used in the Price cluster.
        /// </summary>
        public uint ConsolidatedBill { get; set; }

        /// <summary>
        /// Currency command message field.
        /// 
        /// An unsigned 16-bit field containing identifying information concerning the
        /// local unit of currency used in the Consolidated Bill field. The value of the
        /// currency field should match the values defined by ISO 4217.
        /// </summary>
        public ushort Currency { get; set; }

        /// <summary>
        /// Bill Trailing Digit command message field.
        /// 
        /// An 8-bit field used to determine where the decimal point is located in the
        /// Consolidated Bill field. The most significant nibble contains the Trailing Digit
        /// sub field which indicates the number of digits to the right of the decimal point.
        /// </summary>
        public byte BillTrailingDigit { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public PublishConsolidatedBillCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(BillingPeriodStartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(BillingPeriodDuration, ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            serializer.Serialize(BillingPeriodDurationType, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(TariffType, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(ConsolidatedBill, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(Currency, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(BillTrailingDigit, ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            BillingPeriodStartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            BillingPeriodDuration = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_24_BIT_INTEGER));
            BillingPeriodDurationType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            TariffType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            ConsolidatedBill = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            Currency = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            BillTrailingDigit = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("PublishConsolidatedBillCommand [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", BillingPeriodStartTime=");
            builder.Append(BillingPeriodStartTime);
            builder.Append(", BillingPeriodDuration=");
            builder.Append(BillingPeriodDuration);
            builder.Append(", BillingPeriodDurationType=");
            builder.Append(BillingPeriodDurationType);
            builder.Append(", TariffType=");
            builder.Append(TariffType);
            builder.Append(", ConsolidatedBill=");
            builder.Append(ConsolidatedBill);
            builder.Append(", Currency=");
            builder.Append(Currency);
            builder.Append(", BillTrailingDigit=");
            builder.Append(BillTrailingDigit);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
