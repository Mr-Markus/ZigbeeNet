using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.PollControl;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.PollControl
{
    /// <summary>
    /// Check In Command value object class.
    ///
    /// Cluster: Poll Control. Command ID 0x00 is sent FROM the server.
    /// This command is a specific command used for the Poll Control cluster.
    ///
    /// The Poll Control Cluster server sends out a Check-in command to the devices to which it is
    /// paired based on the serverâ€™s Check-inInterval attribute. It does this to find out if any
    /// of the Poll Control Cluster Clients with which it is paired are interested in having it
    /// enter fast poll mode so that it can be managed. This request is sent out based on either the
    /// Check-inInterval, or the next Check-in value in the Fast Poll Stop Request generated by
    /// the Poll Control Cluster Client. <br> The Check-in command expects a Check-in Response
    /// command to be sent back from the Poll Control Client. If the Poll Control Server does not
    /// receive a Check-in response back from the Poll Control Client up to 7.68 seconds it is
    /// free to return to polling according to the LongPollInterval.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class CheckInCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0020;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x00;

        /// <summary>
        /// Default constructor.
        /// </summary>
        public CheckInCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("CheckInCommand [");
            builder.Append(base.ToString());
            builder.Append(']');

            return builder.ToString();
        }
    }
}
