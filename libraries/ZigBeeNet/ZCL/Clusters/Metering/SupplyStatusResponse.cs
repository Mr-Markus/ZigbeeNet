using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Supply Status Response value object class.
    ///
    /// Cluster: Metering. Command ID 0x0C is sent FROM the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// This command is transmitted by a Metering Device in response to a ChangeSupply command.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class SupplyStatusResponse : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0C;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider to whom this command relates.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Implementation Date Time command message field.
        /// 
        /// A UTC Time field to indicate the date at which the originating command was to be
        /// applied.
        /// </summary>
        public DateTime ImplementationDateTime { get; set; }

        /// <summary>
        /// Supply Status command message field.
        /// 
        /// An 8-bit enumeration field indicating the status of the energy supply controlled
        /// by the Metering Device following implementation of the originating command.
        /// </summary>
        public byte SupplyStatus { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public SupplyStatusResponse()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(ImplementationDateTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(SupplyStatus, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            ImplementationDateTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            SupplyStatus = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("SupplyStatusResponse [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", ImplementationDateTime=");
            builder.Append(ImplementationDateTime);
            builder.Append(", SupplyStatus=");
            builder.Append(SupplyStatus);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
