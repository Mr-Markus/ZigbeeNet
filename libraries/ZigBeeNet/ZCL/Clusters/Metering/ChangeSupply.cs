using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Change Supply value object class.
    ///
    /// Cluster: Metering. Command ID 0x0B is sent TO the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// This command is sent from the Head-end or ESI to the Metering Device to instruct it to
    /// change the status of the valve or load switch, i.e. the supply.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class ChangeSupply : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0B;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider to whom this command relates.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Request Date Time command message field.
        /// 
        /// A UTC Time field to indicate the date and time at which the supply change was
        /// requested.
        /// </summary>
        public DateTime RequestDateTime { get; set; }

        /// <summary>
        /// Implementation Date Time command message field.
        /// 
        /// A UTC Time field to indicate the date at which the supply change is to be applied. An
        /// Implementation Date/Time of 0x00000000 shall indicate that the command should be
        /// executed immediately. An Implementation Date/Time of 0xFFFFFFFF shall cause an
        /// existing but pending Change Supply command with the same Provider ID and Issuer
        /// Event ID to be cancelled (the status of the supply will not change but the Proposed
        /// Change Supply Implementation Time attribute shall be reset to zero).
        /// </summary>
        public DateTime ImplementationDateTime { get; set; }

        /// <summary>
        /// Proposed Supply Status command message field.
        /// 
        /// An 8-bit enumeration field indicating the status of the energy supply controlled
        /// by the Metering Device following implementation of this command.
        /// </summary>
        public byte ProposedSupplyStatus { get; set; }

        /// <summary>
        /// Supply Control Bits command message field.
        /// 
        /// An 8-bit BitMap where the least significant nibble defines the Supply Control
        /// bits.
        /// </summary>
        public byte SupplyControlBits { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ChangeSupply()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.CLIENT_TO_SERVER;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(RequestDateTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(ImplementationDateTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(ProposedSupplyStatus, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(SupplyControlBits, ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            RequestDateTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            ImplementationDateTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            ProposedSupplyStatus = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            SupplyControlBits = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("ChangeSupply [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", RequestDateTime=");
            builder.Append(RequestDateTime);
            builder.Append(", ImplementationDateTime=");
            builder.Append(ImplementationDateTime);
            builder.Append(", ProposedSupplyStatus=");
            builder.Append(ProposedSupplyStatus);
            builder.Append(", SupplyControlBits=");
            builder.Append(SupplyControlBits);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
