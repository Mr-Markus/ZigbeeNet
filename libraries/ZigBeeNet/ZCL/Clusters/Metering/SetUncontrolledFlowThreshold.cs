using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Set Uncontrolled Flow Threshold value object class.
    ///
    /// Cluster: Metering. Command ID 0x0E is sent TO the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// This command is used to update the 'Uncontrolled Flow Rate' configuration data used by
    /// flow meters.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class SetUncontrolledFlowThreshold : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0E;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider to whom this command relates.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Uncontrolled Flow Threshold command message field.
        /// 
        /// The threshold above which a flow meter (e.g. Gas or Water) shall detect an
        /// uncontrolled flow. A value of 0x0000 indicates the feature in unused.
        /// </summary>
        public ushort UncontrolledFlowThreshold { get; set; }

        /// <summary>
        /// Unit Of Measure command message field.
        /// 
        /// An enumeration indicating the unit of measure to be used in conjunction with the
        /// Uncontrolled Flow Threshold attribute. The enumeration used for this field shall
        /// match one of the UnitOfMeasure values using a pure binary format as defined in the
        /// Metering cluster.
        /// </summary>
        public byte UnitOfMeasure { get; set; }

        /// <summary>
        /// Multiplier command message field.
        /// 
        /// An unsigned 16-bit value indicating the multiplier, to be used in conjunction with
        /// the Uncontrolled Flow Threshold and Divisor fields, to determine the true flow
        /// threshold value. A value of 0x0000 is not allowed.
        /// </summary>
        public ushort Multiplier { get; set; }

        /// <summary>
        /// Divisor command message field.
        /// 
        /// An unsigned 16-bit value indicating the divisor, to be used in conjunction with the
        /// Uncontrolled Flow Threshold and Multiplier fields, to determine the true flow
        /// threshold value. A value of 0x0000 is not allowed.
        /// </summary>
        public ushort Divisor { get; set; }

        /// <summary>
        /// Stabilisation Period command message field.
        /// 
        /// An unsigned 8-bit value indicating the time given to allow the flow to stabilize. It
        /// is defined in units of tenths of a second.
        /// </summary>
        public byte StabilisationPeriod { get; set; }

        /// <summary>
        /// Measurement Period command message field.
        /// 
        /// An unsigned 16-bit value indicating the period over which the flow is measured and
        /// compared against the Uncontrolled Flow Threshold value. It is defined in units of 1
        /// second.
        /// </summary>
        public ushort MeasurementPeriod { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public SetUncontrolledFlowThreshold()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.CLIENT_TO_SERVER;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(UncontrolledFlowThreshold, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(UnitOfMeasure, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(Multiplier, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(Divisor, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(StabilisationPeriod, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(MeasurementPeriod, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            UncontrolledFlowThreshold = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            UnitOfMeasure = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            Multiplier = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            Divisor = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            StabilisationPeriod = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            MeasurementPeriod = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("SetUncontrolledFlowThreshold [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", UncontrolledFlowThreshold=");
            builder.Append(UncontrolledFlowThreshold);
            builder.Append(", UnitOfMeasure=");
            builder.Append(UnitOfMeasure);
            builder.Append(", Multiplier=");
            builder.Append(Multiplier);
            builder.Append(", Divisor=");
            builder.Append(Divisor);
            builder.Append(", StabilisationPeriod=");
            builder.Append(StabilisationPeriod);
            builder.Append(", MeasurementPeriod=");
            builder.Append(MeasurementPeriod);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
