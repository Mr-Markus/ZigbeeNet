using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Start Sampling value object class.
    ///
    /// Cluster: Metering. Command ID 0x07 is sent TO the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// The sampling mechanism allows a set of samples of the specified type of data to be taken,
    /// commencing at the stipulated start time. This mechanism may run concurrently with the
    /// capturing of profile data, and may refer the same parameters, albeit possibly at a
    /// different sampling rate.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class StartSampling : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x07;

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information. Commands should be ignored if the value of the Issuer Event ID is equal
        /// to or less than the previous value; a device may return a ZCL Default Response
        /// command in this case.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Start Sampling Time command message field.
        /// 
        /// A UTC Time field to denote the time at which the sampling should start. A start
        /// Date/Time of 0x00000000 shall indicate that the command should be executed
        /// immediately. A start Date/Time of 0xFFFFFFFF shall cause an existing
        /// StartSampling command with the same Issuer Event ID to be cancelled.
        /// </summary>
        public DateTime StartSamplingTime { get; set; }

        /// <summary>
        /// Sample Type command message field.
        /// 
        /// An 8 bit enumeration that identifies the type of data being sampled.
        /// </summary>
        public byte SampleType { get; set; }

        /// <summary>
        /// Sample Request Interval command message field.
        /// 
        /// An unsigned 16-bit field representing the interval or time in seconds between
        /// samples.
        /// </summary>
        public ushort SampleRequestInterval { get; set; }

        /// <summary>
        /// Max Number Of Samples command message field.
        /// 
        /// A 16 bit unsigned integer that represents the number of samples to be taken.
        /// </summary>
        public ushort MaxNumberOfSamples { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public StartSampling()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.CLIENT_TO_SERVER;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(StartSamplingTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(SampleType, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(SampleRequestInterval, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(MaxNumberOfSamples, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            StartSamplingTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            SampleType = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            SampleRequestInterval = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            MaxNumberOfSamples = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("StartSampling [");
            builder.Append(base.ToString());
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", StartSamplingTime=");
            builder.Append(StartSamplingTime);
            builder.Append(", SampleType=");
            builder.Append(SampleType);
            builder.Append(", SampleRequestInterval=");
            builder.Append(SampleRequestInterval);
            builder.Append(", MaxNumberOfSamples=");
            builder.Append(MaxNumberOfSamples);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
