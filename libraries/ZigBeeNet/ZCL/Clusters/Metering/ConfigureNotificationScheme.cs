using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Configure Notification Scheme value object class.
    ///
    /// Cluster: Metering. Command ID 0x09 is sent FROM the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// FIXME: The ConfigureNotificationScheme is sent to the mirror once the mirror has been
    /// created. The command deals with the operational configuration of the Mirror and the
    /// device that reports to the mirror. No default schemes are allowed to be overwritten.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class ConfigureNotificationScheme : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x09;

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the device being mirrored. When new information is
        /// provided that replaces older information, this field allows devices to determine
        /// which information is newer. It is recommended that the value contained in this
        /// field is a UTC based time stamp (UTCTime data type) identifying when the command was
        /// issued. Thus, newer information will have a value in the Issuer Event ID field that
        /// is larger than older information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Notification Scheme command message field.
        /// 
        /// An unsigned 8-bit integer that allows for the pre-loading of the Notification
        /// Flags bit mapping to ZCL or Smart Energy Standard commands.
        /// </summary>
        public byte NotificationScheme { get; set; }

        /// <summary>
        /// Notification Flag Order command message field.
        /// 
        /// A 32-bit bitmap, consisting of 8 nibbles which define the Notification Flag
        /// attributes (and order) to be returned in a MirrorReportAttributeResponse
        /// command.
        /// </summary>
        public int NotificationFlagOrder { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ConfigureNotificationScheme()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(NotificationScheme, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(NotificationFlagOrder, ZclDataType.Get(DataType.BITMAP_32_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            NotificationScheme = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            NotificationFlagOrder = deserializer.Deserialize<int>(ZclDataType.Get(DataType.BITMAP_32_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("ConfigureNotificationScheme [");
            builder.Append(base.ToString());
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", NotificationScheme=");
            builder.Append(NotificationScheme);
            builder.Append(", NotificationFlagOrder=");
            builder.Append(NotificationFlagOrder);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
