using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Reset Load Limit Counter value object class.
    ///
    /// Cluster: Metering. Command ID 0x0A is sent TO the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// The ResetLoadLimitCounter command shall cause the LoadLimitCounter attribute to be
    /// reset.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class ResetLoadLimitCounter : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0A;

        /// <summary>
        /// Provider ID command message field.
        /// 
        /// An unsigned 32-bit field containing a unique identifier for the commodity
        /// provider.
        /// </summary>
        public uint ProviderId { get; set; }

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. This field allows devices
        /// to determine if a new command has been issued. The value contained in this field is a
        /// unique number managed by upstream servers or a UTC based time stamp (UTCTime data
        /// type) identifying when the command was issued. Thus, a newer command will have a
        /// value in the Issuer Event ID field that is larger than previous versions of the
        /// command.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ResetLoadLimitCounter()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.CLIENT_TO_SERVER;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(ProviderId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            ProviderId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("ResetLoadLimitCounter [");
            builder.Append(base.ToString());
            builder.Append(", ProviderId=");
            builder.Append(ProviderId);
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
