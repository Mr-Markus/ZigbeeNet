using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Set Supply Status value object class.
    ///
    /// Cluster: Metering. Command ID 0x0D is sent TO the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// This command is used to specify the required status of the supply following the
    /// occurance of certain events on the meter.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class SetSupplyStatus : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x0D;

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Supply Tamper State command message field.
        /// 
        /// The SupplyTamperState indicates the required status of the supply following the
        /// detection of a tamper event within the metering device.
        /// </summary>
        public byte SupplyTamperState { get; set; }

        /// <summary>
        /// Supply Depletion State command message field.
        /// 
        /// The SupplyDepletionState indicates the required status of the supply following
        /// detection of a depleted battery within the metering device.
        /// </summary>
        public byte SupplyDepletionState { get; set; }

        /// <summary>
        /// Supply Uncontrolled Flow State command message field.
        /// 
        /// The SupplyUncontrolledFlowState indicates the required status of the supply
        /// following detection of an uncontrolled flow event within the metering device.
        /// </summary>
        public byte SupplyUncontrolledFlowState { get; set; }

        /// <summary>
        /// Load Limit Supply State command message field.
        /// 
        /// The LoadLimitSupplyState indicates the required status of the supply once the
        /// device is in a load limit state.
        /// </summary>
        public byte LoadLimitSupplyState { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public SetSupplyStatus()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.CLIENT_TO_SERVER;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(SupplyTamperState, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(SupplyDepletionState, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(SupplyUncontrolledFlowState, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(LoadLimitSupplyState, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            SupplyTamperState = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            SupplyDepletionState = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            SupplyUncontrolledFlowState = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            LoadLimitSupplyState = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("SetSupplyStatus [");
            builder.Append(base.ToString());
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", SupplyTamperState=");
            builder.Append(SupplyTamperState);
            builder.Append(", SupplyDepletionState=");
            builder.Append(SupplyDepletionState);
            builder.Append(", SupplyUncontrolledFlowState=");
            builder.Append(SupplyUncontrolledFlowState);
            builder.Append(", LoadLimitSupplyState=");
            builder.Append(LoadLimitSupplyState);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
