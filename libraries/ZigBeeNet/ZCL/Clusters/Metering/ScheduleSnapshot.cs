using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Schedule Snapshot value object class.
    ///
    /// Cluster: Metering. Command ID 0x04 is sent TO the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// This command is used to set up a schedule of when the device shall create snapshot data.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class ScheduleSnapshot : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x04;

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. When new information is
        /// provided that replaces older information for the same time period, this field
        /// allows devices to determine which information is newer. The value contained in
        /// this field is a unique number managed by upstream servers or a UTC based time stamp
        /// (UTCTime data type) identifying when the snapshot command was issued. Thus, newer
        /// information will have a value in the Issuer Event ID field that is larger than older
        /// information.This is required when the snapshot data needs to be transmitted over
        /// several messages, allowing for the client to easily identify the set of messages
        /// that form a group.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Command Index command message field.
        /// 
        /// The CommandIndex is used to count the payload fragments for the case where the
        /// entire payload does not fit into one message. The CommandIndex starts at 0 and is
        /// incremented for each fragment belonging to the same command.
        /// </summary>
        public byte CommandIndex { get; set; }

        /// <summary>
        /// Total Number of Commands command message field.
        /// 
        /// In the case where the entire payload does not fit into one message, the Total Number
        /// of Commands field indicates the total number of sub-commands in the message.
        /// </summary>
        public byte TotalNumberOfCommands { get; set; }

        /// <summary>
        /// Snapshot Schedule Payload command message field.
        /// </summary>
        public SnapshotSchedulePayload SnapshotSchedulePayload { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ScheduleSnapshot()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.CLIENT_TO_SERVER;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(CommandIndex, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(TotalNumberOfCommands, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            SnapshotSchedulePayload.Serialize(serializer);
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            CommandIndex = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            TotalNumberOfCommands = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            SnapshotSchedulePayload = new SnapshotSchedulePayload();
            SnapshotSchedulePayload.Deserialize(deserializer);
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("ScheduleSnapshot [");
            builder.Append(base.ToString());
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", CommandIndex=");
            builder.Append(CommandIndex);
            builder.Append(", TotalNumberOfCommands=");
            builder.Append(TotalNumberOfCommands);
            builder.Append(", SnapshotSchedulePayload=");
            builder.Append(SnapshotSchedulePayload);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
