using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.Metering;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.Metering
{
    /// <summary>
    /// Schedule Snapshot Response value object class.
    ///
    /// Cluster: Metering. Command ID 0x04 is sent FROM the server.
    /// This command is a specific command used for the Metering cluster.
    ///
    /// This command is generated in response to a ScheduleSnapshot command, and is sent to
    /// confirm whether the requested snapshot schedule has been set up.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class ScheduleSnapshotResponse : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0702;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x04;

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the commodity provider. The value contained in
        /// this field indicates the value allocated to the ScheduleSnapshot command for
        /// which this response is generated.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Snapshot Response Payload command message field.
        /// 
        /// The ScheduleSnapshotResponse payload may contain several instances of the
        /// sub-payload. Each instance is an acknowledgment from the device for a scheduled
        /// snapshot and the ability for the device to support that type of snapshot.
        /// </summary>
        public SnapshotResponsePayload SnapshotResponsePayload { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ScheduleSnapshotResponse()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            SnapshotResponsePayload.Serialize(serializer);
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            SnapshotResponsePayload = new SnapshotResponsePayload();
            SnapshotResponsePayload.Deserialize(deserializer);
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("ScheduleSnapshotResponse [");
            builder.Append(base.ToString());
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", SnapshotResponsePayload=");
            builder.Append(SnapshotResponsePayload);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
