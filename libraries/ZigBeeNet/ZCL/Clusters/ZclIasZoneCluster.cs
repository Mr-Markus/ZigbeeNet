
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.IASZone;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters
{
    /// <summary>
    /// IAS Zone cluster implementation (Cluster ID 0x0500).
    ///
    /// The IAS Zone cluster defines an interface to the functionality of an IAS security zone
    /// device. IAS Zone supports up to two alarm types per zone, low battery reports and
    /// supervision of the IAS network.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class ZclIasZoneCluster : ZclCluster
    {
        /// <summary>
        /// The ZigBee Cluster Library Cluster ID
        /// </summary>
        public const ushort CLUSTER_ID = 0x0500;

        /// <summary>
        /// The ZigBee Cluster Library Cluster Name
        /// </summary>
        public const string CLUSTER_NAME = "IAS Zone";

        // Attribute constants

        /// <summary>
        /// The Zone State attribute defines if the device is currently enrolled with a CIE or
        /// not.
        /// </summary>
        public const ushort ATTR_ZONESTATE = 0x0000;

        /// <summary>
        /// The Zone Type dictates the meaning of Alarm1 and Alarm2 bits of the ZoneStatus
        /// attribute
        /// </summary>
        public const ushort ATTR_ZONETYPE = 0x0001;

        /// <summary>
        /// The ZoneStatus attribute is a bit map. Each bit defines the state of an alarm.
        /// </summary>
        public const ushort ATTR_ZONESTATUS = 0x0002;

        /// <summary>
        /// The IAS CIE Address attribute specifies the address that commands generated by the
        /// server shall be sent to. All commands received by the server must also come from this
        /// address.
        /// It is up to the zone's specific implementation to permit or deny change (write) of
        /// this attribute at specific times. Also, it is up to the zone's specific
        /// implementation to implement some auto-detect for the CIE (example: by requesting
        /// the ZigBee cluster discovery service to locate a Zone Server cluster.) or require
        /// the intervention of a CT in order to configure this attribute during installation.
        /// </summary>
        public const ushort ATTR_IASCIEADDRESS = 0x0010;

        /// <summary>
        /// A unique reference number allocated by the CIE at zone enrollment time.
        /// Used by IAS devices to reference specific zones when communicating with the CIE.
        /// The ZoneID of each zone stays fixed until that zone is unenrolled.
        /// </summary>
        public const ushort ATTR_ZONEID = 0x0011;

        /// <summary>
        /// Provides the total number of sensitivity levels supported by the IAS Zone server.
        /// The purpose of this attribute is to support devices that can be configured to be more
        /// or less sensitive (e.g., motion sensor). It provides IAS Zone clients with the
        /// range of sensitivity levels that are supported so they may be presented to the user
        /// for configuration.
        /// The values 0x00 and 0x01 are reserved because a device that has zero or one
        /// sensitivity level should NOT support this attribute because no configuration of
        /// the IAS Zone server’s sensitivity level is possible.
        /// The meaning of each sensitivity level is manufacturer-specific. However, the
        /// sensitivity level of the IAS Zone server shall become more sensitive as they
        /// ascend. For example, if the server supports three sen- sitivity levels, then the
        /// value of this attribute would be 0x03 where 0x03 is more sensitive than 0x02, which
        /// is more sensitive than 0x01.
        /// </summary>
        public const ushort ATTR_NUMBEROFZONESENSITIVITYLEVELSSUPPORTED = 0x0012;

        /// <summary>
        /// Allows an IAS Zone client to query and configure the IAS Zone server’s sensitivity
        /// level. Please see NumberOfZoneSensitivityLevelsSupported Attribute for more
        /// detail on how to interpret this attribute.
        /// The default value 0x00 is the device’s default sensitivity level as configured by
        /// the manufacturer. It may correspond to the same sensitivity as another value in the
        /// NumberOfZoneSensitivityLevelsSupported, but this is the default sensitivity
        /// to be used if the CurrentZoneSensitivityLevel attribute is not otherwise
        /// configured by an IAS Zone client.
        /// </summary>
        public const ushort ATTR_CURRENTZONESENSITIVITYLEVEL = 0x0013;

        protected override Dictionary<ushort, ZclAttribute> InitializeClientAttributes()
        {
            Dictionary<ushort, ZclAttribute> attributeMap = new Dictionary<ushort, ZclAttribute>(0);

            return attributeMap;
        }

        protected override Dictionary<ushort, ZclAttribute> InitializeServerAttributes()
        {
            Dictionary<ushort, ZclAttribute> attributeMap = new Dictionary<ushort, ZclAttribute>(7);

            attributeMap.Add(ATTR_ZONESTATE, new ZclAttribute(this, ATTR_ZONESTATE, "Zone State", ZclDataType.Get(DataType.ENUMERATION_8_BIT), true, true, false, false));
            attributeMap.Add(ATTR_ZONETYPE, new ZclAttribute(this, ATTR_ZONETYPE, "Zone Type", ZclDataType.Get(DataType.ENUMERATION_16_BIT), true, true, false, false));
            attributeMap.Add(ATTR_ZONESTATUS, new ZclAttribute(this, ATTR_ZONESTATUS, "Zone Status", ZclDataType.Get(DataType.BITMAP_16_BIT), true, true, false, false));
            attributeMap.Add(ATTR_IASCIEADDRESS, new ZclAttribute(this, ATTR_IASCIEADDRESS, "IAS CIE Address", ZclDataType.Get(DataType.IEEE_ADDRESS), true, true, true, false));
            attributeMap.Add(ATTR_ZONEID, new ZclAttribute(this, ATTR_ZONEID, "Zone ID", ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER), true, true, true, false));
            attributeMap.Add(ATTR_NUMBEROFZONESENSITIVITYLEVELSSUPPORTED, new ZclAttribute(this, ATTR_NUMBEROFZONESENSITIVITYLEVELSSUPPORTED, "Number Of Zone Sensitivity Levels Supported", ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER), false, true, false, false));
            attributeMap.Add(ATTR_CURRENTZONESENSITIVITYLEVEL, new ZclAttribute(this, ATTR_CURRENTZONESENSITIVITYLEVEL, "Current Zone Sensitivity Level", ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER), false, true, true, false));

            return attributeMap;
        }

        protected override Dictionary<ushort, Func<ZclCommand>> InitializeServerCommands()
        {
            Dictionary<ushort, Func<ZclCommand>> commandMap = new Dictionary<ushort, Func<ZclCommand>>(2);

            commandMap.Add(0x0000, () => new ZoneStatusChangeNotificationCommand());
            commandMap.Add(0x0001, () => new ZoneEnrollRequestCommand());

            return commandMap;
        }

        protected override Dictionary<ushort, Func<ZclCommand>> InitializeClientCommands()
        {
            Dictionary<ushort, Func<ZclCommand>> commandMap = new Dictionary<ushort, Func<ZclCommand>>(3);

            commandMap.Add(0x0000, () => new ZoneEnrollResponse());
            commandMap.Add(0x0001, () => new InitiateNormalOperationModeCommand());
            commandMap.Add(0x0002, () => new InitiateTestModeCommand());

            return commandMap;
        }

        /// <summary>
        /// Default constructor to create a IAS Zone cluster.
        ///
        /// <param name="zigbeeEndpoint"> the ZigBeeEndpoint this cluster is contained within </param>
        /// </summary>
        public ZclIasZoneCluster(ZigBeeEndpoint zigbeeEndpoint)
            :base(zigbeeEndpoint, CLUSTER_ID, CLUSTER_NAME)
        {
        }

        /// <summary>
        /// The Zone Enroll Response
        ///
        /// <param name="enrollResponseCode" <see cref="byte"> Enroll Response Code</ param >
        /// <param name="zoneId" <see cref="byte"> Zone ID</ param >
        /// <returns> the command result Task </returns>
        /// </summary>
        public Task<CommandResult> ZoneEnrollResponse(byte enrollResponseCode, byte zoneId)
        {
            ZoneEnrollResponse command = new ZoneEnrollResponse();

            // Set the fields
            command.EnrollResponseCode = enrollResponseCode;
            command.ZoneId = zoneId;

            return Send(command);
        }

        /// <summary>
        /// The Initiate Normal Operation Mode Command
        ///
        /// Used to tell the IAS Zone server to commence normal operation mode. <br> Upon
        /// receipt, the IAS Zone server shall commence normal operational mode. <br> Any
        /// configurations and changes made (e.g., CurrentZoneSensitivityLevel
        /// attribute) to the IAS Zone server shall be retained. <br> Upon commencing normal
        /// operation mode, the IAS Zone server shall send a Zone Status Change Notification
        /// command updating the ZoneStatus attribute Test bit to zero (i.e., “operation
        /// mode”).
        ///
        /// <returns> the command result Task </returns>
        /// </summary>
        public Task<CommandResult> InitiateNormalOperationModeCommand()
        {
            return Send(new InitiateNormalOperationModeCommand());
        }

        /// <summary>
        /// The Initiate Test Mode Command
        ///
        /// Certain IAS Zone servers may have operational configurations that could be
        /// configured OTA or locally on the device. This command enables them to be remotely
        /// placed into a test mode so that the user or installer may configure their field of
        /// view, sensitivity, and other operational parameters. They may also verify the
        /// placement and proper operation of the IAS Zone server, which may have been placed in
        /// a difficult to reach location (i.e., making a physical input on the device
        /// impractical to trigger). <br> Another use case for this command is large
        /// deployments, especially commercial and industrial, where placing the entire IAS
        /// system into test mode instead of a single IAS Zone server is infeasible due to the
        /// vulnerabilities that might arise. This command enables only a single IAS Zone
        /// server to be placed into test mode. <br> The biggest limitation of this command is
        /// that most IAS Zone servers today are battery-powered sleepy nodes that cannot
        /// reliably receive commands. However, implementers may decide to program an IAS
        /// Zone server by factory default to maintain a limited duration of normal polling
        /// upon initialization/joining to a new network. Some IAS Zone servers may also have
        /// AC mains power and are able to receive commands. Some types of IAS Zone servers that
        /// may benefit from this command are: motion sensors and fire sensor/smoke alarm
        /// listeners (i.e., a device that listens for a non-communicating fire sensor to
        /// alarm and communicates this to the IAS CIE).
        ///
        /// <param name="testModeDuration" <see cref="byte"> Test Mode Duration</ param >
        /// <param name="currentZoneSensitivityLevel" <see cref="byte"> Current Zone Sensitivity Level</ param >
        /// <returns> the command result Task </returns>
        /// </summary>
        public Task<CommandResult> InitiateTestModeCommand(byte testModeDuration, byte currentZoneSensitivityLevel)
        {
            InitiateTestModeCommand command = new InitiateTestModeCommand();

            // Set the fields
            command.TestModeDuration = testModeDuration;
            command.CurrentZoneSensitivityLevel = currentZoneSensitivityLevel;

            return Send(command);
        }

        /// <summary>
        /// The Zone Status Change Notification Command
        ///
        /// The Zone Status Change Notification command is generated when a change takes place
        /// in one or more bits of the ZoneStatus attribute.
        ///
        /// <param name="zoneStatus" <see cref="ushort"> Zone Status</ param >
        /// <param name="extendedStatus" <see cref="byte"> Extended Status</ param >
        /// <param name="zoneId" <see cref="byte"> Zone ID</ param >
        /// <param name="delay" <see cref="ushort"> Delay</ param >
        /// <returns> the command result Task </returns>
        /// </summary>
        public Task<CommandResult> ZoneStatusChangeNotificationCommand(ushort zoneStatus, byte extendedStatus, byte zoneId, ushort delay)
        {
            ZoneStatusChangeNotificationCommand command = new ZoneStatusChangeNotificationCommand();

            // Set the fields
            command.ZoneStatus = zoneStatus;
            command.ExtendedStatus = extendedStatus;
            command.ZoneId = zoneId;
            command.Delay = delay;

            return Send(command);
        }

        /// <summary>
        /// The Zone Enroll Request Command
        ///
        /// The Zone Enroll Request command is generated when a device embodying the Zone
        /// server cluster wishes to be enrolled as an active alarm device. It must do this
        /// immediately it has joined the network (during commissioning).
        ///
        /// <param name="zoneType" <see cref="ushort"> Zone Type</ param >
        /// <param name="manufacturerCode" <see cref="ushort"> Manufacturer Code</ param >
        /// <returns> the command result Task </returns>
        /// </summary>
        public Task<CommandResult> ZoneEnrollRequestCommand(ushort zoneType, ushort manufacturerCode)
        {
            ZoneEnrollRequestCommand command = new ZoneEnrollRequestCommand();

            // Set the fields
            command.ZoneType = zoneType;
            command.ManufacturerCode = manufacturerCode;

            return Send(command);
        }
    }
}
