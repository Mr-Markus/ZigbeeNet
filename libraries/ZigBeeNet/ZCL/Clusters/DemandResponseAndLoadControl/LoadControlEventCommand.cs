using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.DemandResponseAndLoadControl;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.DemandResponseAndLoadControl
{
    /// <summary>
    /// Load Control Event Command value object class.
    ///
    /// Cluster: Demand Response And Load Control. Command ID 0x00 is sent FROM the server.
    /// This command is a specific command used for the Demand Response And Load Control cluster.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class LoadControlEventCommand : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0701;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x00;

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the Energy provider. The value of this field allows
        /// matching of Event reports with a specific Demand Response and Load Control event.
        /// The expected value contained in this field shall be a unique number managed by
        /// upstream systems or a UTC based time stamp (UTCTime data type) identifying when the
        /// Load Control Event was issued.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Device Class command message field.
        /// 
        /// Bit encoded field representing the Device Class to apply the current Load Control
        /// Event. Each bit, if set individually or in combination, indicates the class
        /// device(s) needing to participate in the event. (Note that the participating
        /// device may be different than the controlling device. For instance, a thermostat
        /// may act on behalf of an HVAC compressor or furnace and/or Strip Heat/Baseboard
        /// Heater and should take action on their behalf, as the thermostat itself is not
        /// subject to load shed but controls devices that are subject to load shed.)
        /// </summary>
        public ushort DeviceClass { get; set; }

        /// <summary>
        /// Utility Enrollment Group command message field.
        /// 
        /// The Utility Enrollment Group field can be used in conjunction with the Device Class
        /// bits. It provides a mechanism to direct Load Control Events to groups of Devices.
        /// Example, by assigning two different groups relating to either Demand Response
        /// programs or geographic areas, Load Control Events can be further directed for a
        /// subset of Device Classes (i.e. Device Class Bit 0 and Utility Enrollment Group #1
        /// vs. Device Class Bit0 and Utility Enrollment Group #2). 0x00 addresses all groups,
        /// and values 0x01 to 0xFF address individual groups that match.
        /// If the Device Class and/or Utility Enrollment Group fields don’t apply to your End
        /// Device, the Load Control Event command shall be ignored by either dropping the
        /// message and not replying at all or by sending back a Default Response message with a
        /// SUCCESS status code.
        /// </summary>
        public byte UtilityEnrollmentGroup { get; set; }

        /// <summary>
        /// Start Time command message field.
        /// 
        /// UTC Timestamp representing when the event is scheduled to start. A start time of
        /// 0x00000000 is a special time denoting “now.” If the device would send an event with a
        /// Start Time of now, adjust the Duration In Minutes field to correspond to the
        /// remainder of the event.
        /// </summary>
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Duration In Minutes command message field.
        /// 
        /// Duration of this event in number of minutes. Maximum value is 1440 (one day).
        /// </summary>
        public ushort DurationInMinutes { get; set; }

        /// <summary>
        /// Criticality Level command message field.
        /// 
        /// This field defines the level of criticality of this event. The action taken by load
        /// control devices for an event can be solely based on this value, or combination with
        /// other Load Control Event fields supported by this device. For example, additional
        /// fields such as Average Load Adjustment Percentage, Duty Cycle, Cooling
        /// Temperature Offset, Heating Temperature Offset, Cooling Temperature Set Point
        /// or Heating Temperature Set Point can be used in combination with the Criticality
        /// level.
        /// </summary>
        public byte CriticalityLevel { get; set; }

        /// <summary>
        /// Cooling Temperature Offset command message field.
        /// 
        /// Requested offset to apply to the normal cooling setpoint at the time of the start of
        /// the event in + 0.1 oC.
        /// </summary>
        public byte CoolingTemperatureOffset { get; set; }

        /// <summary>
        /// Heating Temperature Offset command message field.
        /// 
        /// Requested offset to apply to the normal heating setpoint at the time of the start of
        /// the event in + 0.1 oC.
        /// </summary>
        public byte HeatingTemperatureOffset { get; set; }

        /// <summary>
        /// Cooling Temperature Set Point command message field.
        /// 
        /// Requested cooling set point in 0.01 degrees Celsius.
        /// </summary>
        public short CoolingTemperatureSetPoint { get; set; }

        /// <summary>
        /// Heating Temperature Set Point command message field.
        /// 
        /// Requested heating set point in 0.01 degrees Celsius.
        /// </summary>
        public short HeatingTemperatureSetPoint { get; set; }

        /// <summary>
        /// Average Load Adjustment Percentage command message field.
        /// 
        /// Defines a maximum energy usage limit as a percentage of the client implementations
        /// specific average energy usage. The load adjustment percentage is added to 100%
        /// creating a percentage limit applied to the client implementations specific
        /// average energy usage. A -10% load adjustment percentage will establish an energy
        /// usage limit equal to 90% of the client implementations specific average energy
        /// usage. Each load adjustment percentage is referenced to the client
        /// implementations specific average energy usage. There are no cumulative effects.
        /// The range of this field is -100 to +100 with a resolution of 1 percent. A -100% value
        /// equals a total load shed. A 0% value will limit the energy usage to the client
        /// implementation’s specific average energy usage. A +100% value will limit the
        /// energy usage to double the client implementation’s specific average energy
        /// usage.
        /// A value of 0x80 indicates the field is not used. All other values are reserved for
        /// future use.
        /// </summary>
        public sbyte AverageLoadAdjustmentPercentage { get; set; }

        /// <summary>
        /// Duty Cycle command message field.
        /// 
        /// Defines the maximum On state duty cycle as a percentage of time. Example, if the
        /// value is 80, the device would be in an “on state” for 80% of the time for the duration of
        /// the event. Range of the value is 0 to 100. A value of 0xFF indicates the field is not
        /// used. All other values are reserved for future use.
        /// Duty cycle control is a device specific issue and shall be managed by the device
        /// manufacturer. It is expected that the duty cycle of the device under control will
        /// span the shortest practical time period in accordance with the nature of the device
        /// under control and the intent of the request for demand reduction. For typical
        /// Device Classes, three minutes7 for each 10% of duty cycle is recommended. It is
        /// expected that the “off state” will precede the “on state”.
        /// </summary>
        public byte DutyCycle { get; set; }

        /// <summary>
        /// Event Control command message field.
        /// 
        /// Identifies additional control options for the event.
        /// </summary>
        public byte EventControl { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public LoadControlEventCommand()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(DeviceClass, ZclDataType.Get(DataType.BITMAP_16_BIT));
            serializer.Serialize(UtilityEnrollmentGroup, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(StartTime, ZclDataType.Get(DataType.UTCTIME));
            serializer.Serialize(DurationInMinutes, ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            serializer.Serialize(CriticalityLevel, ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            serializer.Serialize(CoolingTemperatureOffset, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(HeatingTemperatureOffset, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(CoolingTemperatureSetPoint, ZclDataType.Get(DataType.SIGNED_16_BIT_INTEGER));
            serializer.Serialize(HeatingTemperatureSetPoint, ZclDataType.Get(DataType.SIGNED_16_BIT_INTEGER));
            serializer.Serialize(AverageLoadAdjustmentPercentage, ZclDataType.Get(DataType.SIGNED_8_BIT_INTEGER));
            serializer.Serialize(DutyCycle, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(EventControl, ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            DeviceClass = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.BITMAP_16_BIT));
            UtilityEnrollmentGroup = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            StartTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
            DurationInMinutes = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.UNSIGNED_16_BIT_INTEGER));
            CriticalityLevel = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.ENUMERATION_8_BIT));
            CoolingTemperatureOffset = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            HeatingTemperatureOffset = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            CoolingTemperatureSetPoint = deserializer.Deserialize<short>(ZclDataType.Get(DataType.SIGNED_16_BIT_INTEGER));
            HeatingTemperatureSetPoint = deserializer.Deserialize<short>(ZclDataType.Get(DataType.SIGNED_16_BIT_INTEGER));
            AverageLoadAdjustmentPercentage = deserializer.Deserialize<sbyte>(ZclDataType.Get(DataType.SIGNED_8_BIT_INTEGER));
            DutyCycle = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            EventControl = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("LoadControlEventCommand [");
            builder.Append(base.ToString());
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", DeviceClass=");
            builder.Append(DeviceClass);
            builder.Append(", UtilityEnrollmentGroup=");
            builder.Append(UtilityEnrollmentGroup);
            builder.Append(", StartTime=");
            builder.Append(StartTime);
            builder.Append(", DurationInMinutes=");
            builder.Append(DurationInMinutes);
            builder.Append(", CriticalityLevel=");
            builder.Append(CriticalityLevel);
            builder.Append(", CoolingTemperatureOffset=");
            builder.Append(CoolingTemperatureOffset);
            builder.Append(", HeatingTemperatureOffset=");
            builder.Append(HeatingTemperatureOffset);
            builder.Append(", CoolingTemperatureSetPoint=");
            builder.Append(CoolingTemperatureSetPoint);
            builder.Append(", HeatingTemperatureSetPoint=");
            builder.Append(HeatingTemperatureSetPoint);
            builder.Append(", AverageLoadAdjustmentPercentage=");
            builder.Append(AverageLoadAdjustmentPercentage);
            builder.Append(", DutyCycle=");
            builder.Append(DutyCycle);
            builder.Append(", EventControl=");
            builder.Append(EventControl);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
