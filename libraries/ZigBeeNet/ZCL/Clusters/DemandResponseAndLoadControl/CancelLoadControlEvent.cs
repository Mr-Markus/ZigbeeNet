using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Security;
using ZigBeeNet.ZCL.Clusters.DemandResponseAndLoadControl;
using ZigBeeNet.ZCL.Field;
using ZigBeeNet.ZCL.Protocol;


namespace ZigBeeNet.ZCL.Clusters.DemandResponseAndLoadControl
{
    /// <summary>
    /// Cancel Load Control Event value object class.
    ///
    /// Cluster: Demand Response And Load Control. Command ID 0x01 is sent FROM the server.
    /// This command is a specific command used for the Demand Response And Load Control cluster.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class CancelLoadControlEvent : ZclCommand
    {
        /// <summary>
        /// The cluster ID to which this command belongs.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0701;

        /// <summary>
        /// The command ID.
        /// </summary>
        public const byte COMMAND_ID = 0x01;

        /// <summary>
        /// Issuer Event ID command message field.
        /// 
        /// Unique identifier generated by the Energy provider. The value of this field allows
        /// matching of Event reports with a specific Demand Response and Load Control event.
        /// It's expected the value contained in this field is a unique number managed by
        /// upstream systems or a UTC based time stamp (UTCTime data type) identifying when the
        /// Load Control Event was issued.
        /// </summary>
        public uint IssuerEventId { get; set; }

        /// <summary>
        /// Device Class command message field.
        /// 
        /// Bit encoded field representing the Device Class to apply the current Load Control
        /// Event. Each bit, if set individually or in combination, indicates the class
        /// device(s) needing to participate in the event. (Note that the participating
        /// device may be different than the controlling device. For instance, a thermostat
        /// may act on behalf of an HVAC compressor or furnace and/or Strip Heat/Baseboard
        /// Heater and should take action on their behalf, as the thermostat itself is not
        /// subject to load shed but controls devices that are subject to load shed.)
        /// </summary>
        public ushort DeviceClass { get; set; }

        /// <summary>
        /// Utility Enrollment Group command message field.
        /// 
        /// The Utility Enrollment Group field can be used in conjunction with the Device Class
        /// bits. It provides a mechanism to direct Load Control Events to groups of Devices.
        /// Example, by assigning two different groups relating to either Demand Response
        /// programs or geographic areas, Load Control Events can be further directed for a
        /// subset of Device Classes (i.e. Device Class Bit 0 and Utility Enrollment Group #1
        /// vs. Device Class Bit0 and Utility Enrollment Group #2). 0x00 addresses all groups,
        /// and values 0x01 to 0xFF address individual groups that match. Please refer to
        /// sub-clause D.2.3.2.1 for further details.
        /// </summary>
        public byte UtilityEnrollmentGroup { get; set; }

        /// <summary>
        /// Cancel Control command message field.
        /// </summary>
        public byte CancelControl { get; set; }

        /// <summary>
        /// Effective Time command message field.
        /// 
        ///
        /// Note: This field is deprecated; a Cancel Load Control command shall now take immediate
        /// effect. A value of 0x00000000 shall be used in all Cancel Load Control commands
        /// UTC Timestamp representing when the cancelling of the event is scheduled to start.
        /// An effective time of 0x00000000 is a special time denoting “now.” If the device
        /// would send an event with an Effective Time of now, adjust the Duration In Minutes
        /// field to correspond to the remainder of the event.
        /// </summary>
        public DateTime EffectiveTime { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public CancelLoadControlEvent()
        {
            ClusterId = CLUSTER_ID;
            CommandId = COMMAND_ID;
            GenericCommand = false;
            CommandDirection = ZclCommandDirection.SERVER_TO_CLIENT;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            serializer.Serialize(IssuerEventId, ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            serializer.Serialize(DeviceClass, ZclDataType.Get(DataType.BITMAP_16_BIT));
            serializer.Serialize(UtilityEnrollmentGroup, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            serializer.Serialize(CancelControl, ZclDataType.Get(DataType.BITMAP_8_BIT));
            serializer.Serialize(EffectiveTime, ZclDataType.Get(DataType.UTCTIME));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            IssuerEventId = deserializer.Deserialize<uint>(ZclDataType.Get(DataType.UNSIGNED_32_BIT_INTEGER));
            DeviceClass = deserializer.Deserialize<ushort>(ZclDataType.Get(DataType.BITMAP_16_BIT));
            UtilityEnrollmentGroup = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));
            CancelControl = deserializer.Deserialize<byte>(ZclDataType.Get(DataType.BITMAP_8_BIT));
            EffectiveTime = deserializer.Deserialize<DateTime>(ZclDataType.Get(DataType.UTCTIME));
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("CancelLoadControlEvent [");
            builder.Append(base.ToString());
            builder.Append(", IssuerEventId=");
            builder.Append(IssuerEventId);
            builder.Append(", DeviceClass=");
            builder.Append(DeviceClass);
            builder.Append(", UtilityEnrollmentGroup=");
            builder.Append(UtilityEnrollmentGroup);
            builder.Append(", CancelControl=");
            builder.Append(CancelControl);
            builder.Append(", EffectiveTime=");
            builder.Append(EffectiveTime);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
