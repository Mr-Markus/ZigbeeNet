using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZigBeeNet.Transaction;
using ZigBeeNet.ZCL;
using ZigBeeNet.ZCL.Protocol;
using ZigBeeNet.ZDO.Field;


namespace ZigBeeNet.ZDO.Command
{
    /// <summary>
    /// Management Leave Request value object class.
    ///
    ///
    /// The Mgmt_Leave_req is generated from a Local Device requesting that a Remote Device
    /// leave the network or to request that another device leave the network. The
    /// Mgmt_Leave_req is generated by a management application which directs the request to a
    /// Remote Device where the NLME-LEAVE.request is to be executed using the parameter
    /// supplied by Mgmt_Leave_req.
    ///
    /// Code is auto-generated. Modifications may be overwritten!
    /// </summary>
    public class ManagementLeaveRequest : ZdoRequest, IZigBeeTransactionMatcher
    {
        /// <summary>
        /// The ZDO cluster ID.
        /// </summary>
        public const ushort CLUSTER_ID = 0x0034;

        /// <summary>
        /// Device Address command message field.
        /// </summary>
        public IeeeAddress DeviceAddress { get; set; }

        /// <summary>
        /// Remove Children_Rejoin command message field.
        /// </summary>
        public bool RemoveChildrenRejoin { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ManagementLeaveRequest()
        {
            ClusterId = CLUSTER_ID;
        }

        internal override void Serialize(ZclFieldSerializer serializer)
        {
            base.Serialize(serializer);

            serializer.Serialize(DeviceAddress, ZclDataType.Get(DataType.IEEE_ADDRESS));
            serializer.Serialize(RemoveChildrenRejoin, ZclDataType.Get(DataType.BOOLEAN));
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            base.Deserialize(deserializer);

            DeviceAddress = deserializer.Deserialize<IeeeAddress>(ZclDataType.Get(DataType.IEEE_ADDRESS));
            RemoveChildrenRejoin = deserializer.Deserialize<bool>(ZclDataType.Get(DataType.BOOLEAN));
        }

        public bool IsTransactionMatch(ZigBeeCommand request, ZigBeeCommand response)
        {
            if (!(response is ManagementLeaveResponse))
            {
                return false;
            }

            return (((ManagementLeaveRequest) request).DestinationAddress.Equals(((ManagementLeaveResponse) response).SourceAddress));
         }

        public override string ToString()
        {
            var builder = new StringBuilder();

            builder.Append("ManagementLeaveRequest [");
            builder.Append(base.ToString());
            builder.Append(", DeviceAddress=");
            builder.Append(DeviceAddress);
            builder.Append(", RemoveChildrenRejoin=");
            builder.Append(RemoveChildrenRejoin);
            builder.Append(']');

            return builder.ToString();
        }
    }
}
